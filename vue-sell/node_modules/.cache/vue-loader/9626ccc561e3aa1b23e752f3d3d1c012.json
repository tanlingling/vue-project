{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/bubble/bubble.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/bubble/bubble.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nexport default {\n  props: {\n    y: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      width: 50,\n      height: 80\n    }\n  },\n  computed: {\n    distance() {\n      return Math.max(0, Math.min(this.y * this.ratio, this.maxDistance))\n    },\n    style() {\n      return `width:${this.width / this.ratio}px;height:${this.height / this.ratio}px`\n    }\n  },\n  mounted() {\n    this.ratio = window.devicePixelRatio\n    this.width *= this.ratio\n    this.height *= this.ratio\n    this.initRadius = 18 * this.ratio\n    this.minHeadRadius = 12 * this.ratio\n    this.minTailRadius = 5 * this.ratio\n    this.initArrowRadius = 10 * this.ratio\n    this.minArrowRadius = 6 * this.ratio\n    this.arrowWidth = 3 * this.ratio\n    this.maxDistance = 40 * this.ratio\n    this.initCenterX = 25 * this.ratio\n    this.initCenterY = 25 * this.ratio\n    this.headCenter = {\n      x: this.initCenterX,\n      y: this.initCenterY\n    }\n    this._draw()\n  },\n  methods: {\n    _draw() {\n      const bubble = this.$refs.bubble\n      let ctx = bubble.getContext('2d')\n      ctx.clearRect(0, 0, bubble.width, bubble.height)\n\n      this._drawBubble(ctx)\n\n      this._drawArrow(ctx)\n    },\n    _drawBubble(ctx) {\n      ctx.save()\n      ctx.beginPath()\n\n      const rate = this.distance / this.maxDistance\n      const headRadius = this.initRadius - (this.initRadius - this.minHeadRadius) * rate\n\n      this.headCenter.y = this.initCenterY - (this.initRadius - this.minHeadRadius) * rate\n\n      // upper semicircle\n      ctx.arc(this.headCenter.x, this.headCenter.y, headRadius, 0, Math.PI, true)\n\n      // left bessel\n      const tailRadius = this.initRadius - (this.initRadius - this.minTailRadius) * rate\n      const tailCenter = {\n        x: this.headCenter.x,\n        y: this.headCenter.y + this.distance\n      }\n\n      const tailPointL = {\n        x: tailCenter.x - tailRadius,\n        y: tailCenter.y\n      }\n      const controlPointL = {\n        x: tailPointL.x,\n        y: tailPointL.y - this.distance / 2\n      }\n\n      ctx.quadraticCurveTo(controlPointL.x, controlPointL.y, tailPointL.x, tailPointL.y)\n\n      // lower semicircle\n      ctx.arc(tailCenter.x, tailCenter.y, tailRadius, Math.PI, 0, true)\n\n      // right bessel\n      const headPointR = {\n        x: this.headCenter.x + headRadius,\n        y: this.headCenter.y\n      }\n      const controlPointR = {\n        x: tailCenter.x + tailRadius,\n        y: headPointR.y + this.distance / 2\n      }\n      ctx.quadraticCurveTo(controlPointR.x, controlPointR.y, headPointR.x, headPointR.y)\n\n      ctx.fillStyle = 'rgb(170,170,170)'\n      ctx.fill()\n      ctx.strokeStyle = 'rgb(153,153,153)'\n      ctx.stroke()\n      ctx.restore()\n    },\n    _drawArrow(ctx) {\n      ctx.save()\n      ctx.beginPath()\n\n      const rate = this.distance / this.maxDistance\n      const arrowRadius = this.initArrowRadius - (this.initArrowRadius - this.minArrowRadius) * rate\n\n      // inner circle\n      ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius - (this.arrowWidth - rate), -Math.PI / 2, 0, true)\n\n      // outer circle\n      ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius, 0, Math.PI * 3 / 2, false)\n\n      ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius - this.arrowWidth / 2 + rate)\n      ctx.lineTo(this.headCenter.x + this.arrowWidth * 2 - rate * 2, this.headCenter.y - arrowRadius + this.arrowWidth / 2)\n\n      ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius + this.arrowWidth * 3 / 2 - rate)\n\n      ctx.fillStyle = 'rgb(255,255,255)'\n      ctx.fill()\n      ctx.strokeStyle = 'rgb(170,170,170)'\n      ctx.stroke()\n      ctx.restore()\n    }\n  },\n  watch: {\n    y() {\n      this._draw()\n    }\n  }\n}\n",{"version":3,"sources":["bubble.vue"],"names":[],"mappings":";;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"bubble.vue","sourceRoot":"node_modules/cube-ui/src/components/bubble","sourcesContent":["<template>\n  <canvas ref=\"bubble\" :width=\"width\" :height=\"height\" :style=\"style\"></canvas>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  export default {\n    props: {\n      y: {\n        type: Number,\n        default: 0\n      }\n    },\n    data() {\n      return {\n        width: 50,\n        height: 80\n      }\n    },\n    computed: {\n      distance() {\n        return Math.max(0, Math.min(this.y * this.ratio, this.maxDistance))\n      },\n      style() {\n        return `width:${this.width / this.ratio}px;height:${this.height / this.ratio}px`\n      }\n    },\n    mounted() {\n      this.ratio = window.devicePixelRatio\n      this.width *= this.ratio\n      this.height *= this.ratio\n      this.initRadius = 18 * this.ratio\n      this.minHeadRadius = 12 * this.ratio\n      this.minTailRadius = 5 * this.ratio\n      this.initArrowRadius = 10 * this.ratio\n      this.minArrowRadius = 6 * this.ratio\n      this.arrowWidth = 3 * this.ratio\n      this.maxDistance = 40 * this.ratio\n      this.initCenterX = 25 * this.ratio\n      this.initCenterY = 25 * this.ratio\n      this.headCenter = {\n        x: this.initCenterX,\n        y: this.initCenterY\n      }\n      this._draw()\n    },\n    methods: {\n      _draw() {\n        const bubble = this.$refs.bubble\n        let ctx = bubble.getContext('2d')\n        ctx.clearRect(0, 0, bubble.width, bubble.height)\n\n        this._drawBubble(ctx)\n\n        this._drawArrow(ctx)\n      },\n      _drawBubble(ctx) {\n        ctx.save()\n        ctx.beginPath()\n\n        const rate = this.distance / this.maxDistance\n        const headRadius = this.initRadius - (this.initRadius - this.minHeadRadius) * rate\n\n        this.headCenter.y = this.initCenterY - (this.initRadius - this.minHeadRadius) * rate\n\n        // upper semicircle\n        ctx.arc(this.headCenter.x, this.headCenter.y, headRadius, 0, Math.PI, true)\n\n        // left bessel\n        const tailRadius = this.initRadius - (this.initRadius - this.minTailRadius) * rate\n        const tailCenter = {\n          x: this.headCenter.x,\n          y: this.headCenter.y + this.distance\n        }\n\n        const tailPointL = {\n          x: tailCenter.x - tailRadius,\n          y: tailCenter.y\n        }\n        const controlPointL = {\n          x: tailPointL.x,\n          y: tailPointL.y - this.distance / 2\n        }\n\n        ctx.quadraticCurveTo(controlPointL.x, controlPointL.y, tailPointL.x, tailPointL.y)\n\n        // lower semicircle\n        ctx.arc(tailCenter.x, tailCenter.y, tailRadius, Math.PI, 0, true)\n\n        // right bessel\n        const headPointR = {\n          x: this.headCenter.x + headRadius,\n          y: this.headCenter.y\n        }\n        const controlPointR = {\n          x: tailCenter.x + tailRadius,\n          y: headPointR.y + this.distance / 2\n        }\n        ctx.quadraticCurveTo(controlPointR.x, controlPointR.y, headPointR.x, headPointR.y)\n\n        ctx.fillStyle = 'rgb(170,170,170)'\n        ctx.fill()\n        ctx.strokeStyle = 'rgb(153,153,153)'\n        ctx.stroke()\n        ctx.restore()\n      },\n      _drawArrow(ctx) {\n        ctx.save()\n        ctx.beginPath()\n\n        const rate = this.distance / this.maxDistance\n        const arrowRadius = this.initArrowRadius - (this.initArrowRadius - this.minArrowRadius) * rate\n\n        // inner circle\n        ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius - (this.arrowWidth - rate), -Math.PI / 2, 0, true)\n\n        // outer circle\n        ctx.arc(this.headCenter.x, this.headCenter.y, arrowRadius, 0, Math.PI * 3 / 2, false)\n\n        ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius - this.arrowWidth / 2 + rate)\n        ctx.lineTo(this.headCenter.x + this.arrowWidth * 2 - rate * 2, this.headCenter.y - arrowRadius + this.arrowWidth / 2)\n\n        ctx.lineTo(this.headCenter.x, this.headCenter.y - arrowRadius + this.arrowWidth * 3 / 2 - rate)\n\n        ctx.fillStyle = 'rgb(255,255,255)'\n        ctx.fill()\n        ctx.strokeStyle = 'rgb(170,170,170)'\n        ctx.stroke()\n        ctx.restore()\n      }\n    },\n    watch: {\n      y() {\n        this._draw()\n      }\n    }\n  }\n</script>\n"]}]}