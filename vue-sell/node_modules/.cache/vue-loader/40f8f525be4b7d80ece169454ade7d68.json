{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/segment-picker/segment-picker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/segment-picker/segment-picker.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport visibilityMixin from '../../common/mixins/visibility'\nimport popupMixin from '../../common/mixins/popup'\nimport pickerMixin from '../../common/mixins/picker'\nimport localeMixin from '../../common/mixins/locale'\n\nconst COMPONENT_NAME = 'cube-segment-picker'\nconst EVENT_NEXT = 'next'\nconst EVENT_PREV = 'prev'\nconst EVENT_SELECT = 'select'\nconst EVENT_CANCEL = 'cancel'\nconst EVENT_CHANGE = 'change'\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin, pickerMixin, localeMixin],\n  props: {\n    data: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    nextTxt: {\n      type: String,\n      default: ''\n    },\n    prevTxt: {\n      type: String,\n      default: ''\n    }\n  },\n  data() {\n    return {\n      current: 0,\n      selectedVal: [],\n      selectedIndex: [],\n      selectedText: []\n    }\n  },\n  computed: {\n    currentPicker () {\n      // $refs is not reactive, should not use to computed or watch, so we import this.data to responsive.\n      for (let i = 0; i < this.data.length; i++) {\n        let item = this.$refs.pickers[i]\n        if (item.$attrs.index === this.current) {\n          return item\n        }\n      }\n    },\n    _nextTxt () {\n      return this.nextTxt || this.$t('next')\n    },\n    _prevTxt () {\n      return this.prevTxt || this.$t('prev')\n    }\n  },\n  watch: {\n    data() {\n      this.current = 0\n      this.selectedVal = []\n      this.selectedIndex = []\n      this.selectedText = []\n    }\n  },\n  methods: {\n    show() {\n      if (this.isVisible || !this.data.length) {\n        return\n      }\n      this.currentPicker.show()\n    },\n    hide() {\n      if (!this.isVisible || !this.data.length) {\n        return\n      }\n      this.$refs.currentPicker.hide()\n    },\n    _select(...args) {\n      this.selectedVal[this.current] = args[0]\n      this.selectedIndex[this.current] = args[1]\n      this.selectedText[this.current] = args[2]\n\n      if (this.current < this.data.length - 1) {\n        this.$emit(EVENT_NEXT, this.current, ...args)\n        this.current++\n        this.currentPicker.show()\n      } else {\n        this.$emit(EVENT_SELECT, this.selectedVal, this.selectedIndex, this.selectedText)\n        this.current = 0\n      }\n    },\n    _cancel(...args) {\n      if (this.current > 0) {\n        this.$emit(EVENT_PREV, this.current, ...args)\n        this.current--\n        this.currentPicker.show()\n      } else {\n        this.$emit(EVENT_CANCEL)\n      }\n    },\n    _change(...args) {\n      this.$emit(EVENT_CHANGE, this.current, ...args)\n    }\n  }\n}\n",{"version":3,"sources":["segment-picker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"segment-picker.vue","sourceRoot":"node_modules/cube-ui/src/components/segment-picker","sourcesContent":["<template>\n  <div class=\"cube-segment-picker\">\n    <!-- Direct props will recover the property from v-bind Object expect 'is'. -->\n    <!-- To ensure the priority of v-bind Object which is from user configure, we check the property of item in every prop. -->\n    <component\n      v-for=\"(item, index) in data\"\n      :key=\"index\"\n      :index=\"index\"\n      ref=\"pickers\"\n      :is=\"item.is || 'cube-picker'\"\n      :title=\"item.title || title\"\n      :subtitle=\"item.subtitle || subtitle\"\n      :confirm-txt=\"item.confirmTxt || (index === data.length - 1 ? _confirmTxt : _nextTxt)\"\n      :cancel-txt=\"item.cancelTxt || (index === 0 ? _cancelTxt : _prevTxt)\"\n      :swipe-time=\"item.swipeTime || swipeTime\"\n      :z-index=\"item.zIndex || zIndex\"\n      :mask-closable=\"maskClosable\"\n      v-bind=\"item\"\n      @select=\"_select\"\n      @cancel=\"_cancel\"\n      @change=\"_change\">\n    </component>\n  </div>\n</template>\n\n<script>\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n  import pickerMixin from '../../common/mixins/picker'\n  import localeMixin from '../../common/mixins/locale'\n\n  const COMPONENT_NAME = 'cube-segment-picker'\n  const EVENT_NEXT = 'next'\n  const EVENT_PREV = 'prev'\n  const EVENT_SELECT = 'select'\n  const EVENT_CANCEL = 'cancel'\n  const EVENT_CHANGE = 'change'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin, pickerMixin, localeMixin],\n    props: {\n      data: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      nextTxt: {\n        type: String,\n        default: ''\n      },\n      prevTxt: {\n        type: String,\n        default: ''\n      }\n    },\n    data() {\n      return {\n        current: 0,\n        selectedVal: [],\n        selectedIndex: [],\n        selectedText: []\n      }\n    },\n    computed: {\n      currentPicker () {\n        // $refs is not reactive, should not use to computed or watch, so we import this.data to responsive.\n        for (let i = 0; i < this.data.length; i++) {\n          let item = this.$refs.pickers[i]\n          if (item.$attrs.index === this.current) {\n            return item\n          }\n        }\n      },\n      _nextTxt () {\n        return this.nextTxt || this.$t('next')\n      },\n      _prevTxt () {\n        return this.prevTxt || this.$t('prev')\n      }\n    },\n    watch: {\n      data() {\n        this.current = 0\n        this.selectedVal = []\n        this.selectedIndex = []\n        this.selectedText = []\n      }\n    },\n    methods: {\n      show() {\n        if (this.isVisible || !this.data.length) {\n          return\n        }\n        this.currentPicker.show()\n      },\n      hide() {\n        if (!this.isVisible || !this.data.length) {\n          return\n        }\n        this.$refs.currentPicker.hide()\n      },\n      _select(...args) {\n        this.selectedVal[this.current] = args[0]\n        this.selectedIndex[this.current] = args[1]\n        this.selectedText[this.current] = args[2]\n\n        if (this.current < this.data.length - 1) {\n          this.$emit(EVENT_NEXT, this.current, ...args)\n          this.current++\n          this.currentPicker.show()\n        } else {\n          this.$emit(EVENT_SELECT, this.selectedVal, this.selectedIndex, this.selectedText)\n          this.current = 0\n        }\n      },\n      _cancel(...args) {\n        if (this.current > 0) {\n          this.$emit(EVENT_PREV, this.current, ...args)\n          this.current--\n          this.currentPicker.show()\n        } else {\n          this.$emit(EVENT_CANCEL)\n        }\n      },\n      _change(...args) {\n        this.$emit(EVENT_CHANGE, this.current, ...args)\n      }\n    }\n  }\n</script>\n"]}]}