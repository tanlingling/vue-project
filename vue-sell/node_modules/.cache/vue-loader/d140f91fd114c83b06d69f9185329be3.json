{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/upload/upload.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/upload/upload.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport UploadBtn from './btn.vue'\nimport UploadFile from './file.vue'\nimport ajaxUpload from './ajax'\nimport btnMixin from './btn-mixin'\nimport {\n  processFiles,\n  newFile,\n  URL,\n  STATUS_READY,\n  STATUS_UPLOADING,\n  STATUS_ERROR,\n  STATUS_SUCCESS\n} from './util'\n\nconst COMPONENT_NAME = 'cube-upload'\nconst EVENT_INPUT = 'input'\nconst EVENT_ADDED = 'files-added'\nconst EVENT_SUBMITTED = 'file-submitted'\nconst EVENT_REMOVED = 'file-removed'\nconst EVENT_SUCCESS = 'file-success'\nconst EVENT_ERROR = 'file-error'\nconst EVENT_CLICK = 'file-click'\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [btnMixin],\n  props: {\n    value: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    action: {\n      type: [String, Object],\n      default: ''\n    },\n    max: {\n      type: Number,\n      default: 10\n    },\n    auto: {\n      type: Boolean,\n      default: true\n    },\n    simultaneousUploads: {\n      type: Number,\n      default: 1\n    },\n    processFile: {\n      type: Function,\n      default: function (file, cb) {\n        cb(file)\n      }\n    }\n  },\n  data() {\n    return {\n      files: this.value,\n      paused: !this.auto\n    }\n  },\n  computed: {\n    actionOptions() {\n      const action = this.action\n      if (typeof action === 'string') {\n        return action ? {\n          target: action\n        } : null\n      } else {\n        return action\n      }\n    },\n    isShowBtn() {\n      return this.files.length < this.max\n    }\n  },\n  watch: {\n    value(newVal) {\n      this.files = newVal\n    },\n    files(newFiles) {\n      this.$emit(EVENT_INPUT, newFiles)\n    }\n  },\n  methods: {\n    addFiles(files) {\n      this.$emit(EVENT_ADDED, files)\n      const filesLen = this.files.length\n      const newFiles = []\n      const maxLen = this.max - filesLen\n      let i = 0\n      let file = files[i]\n      while (newFiles.length < maxLen && file) {\n        if (!file.ignore) {\n          newFiles.push(file)\n          this.files.push(newFile())\n        }\n        file = files[++i]\n      }\n      processFiles(newFiles, this.processFile, (file, index) => {\n        this.$set(this.files, filesLen + index, file)\n        this.$emit(EVENT_SUBMITTED, file)\n      }, () => {\n        // waiting ui\n        this.$nextTick(() => {\n          this.upload()\n        })\n      })\n    },\n    removeFile(file) {\n      this.$emit(EVENT_REMOVED, file)\n      file._xhr && file._xhr.abort()\n      if (file.url) {\n        URL.revokeObjectURL(file.url)\n      }\n      const index = this.files.indexOf(file)\n      this.files.splice(index, 1)\n      this.upload()\n    },\n    fileClick(file) {\n      this.$emit(EVENT_CLICK, file)\n    },\n    upload(retry) {\n      const options = this.actionOptions\n      if (this.paused || !options) {\n        return\n      }\n      const len = this.files.length\n      let uploadingCount = 0\n      let i = 0\n      while (i < len && uploadingCount < this.simultaneousUploads) {\n        const file = this.files[i]\n        const status = file.status\n        if (status === STATUS_READY || (retry && status === STATUS_ERROR && file._retryId !== this.retryId)) {\n          ajaxUpload(file, options, (file) => {\n            if (status === STATUS_ERROR) {\n              file._retryId = this.retryId\n            }\n            this.$emit(file.status === STATUS_SUCCESS ? EVENT_SUCCESS : EVENT_ERROR, file)\n            this.upload(retry)\n          })\n          uploadingCount++\n        } else if (status === STATUS_UPLOADING) {\n          uploadingCount++\n        }\n        i++\n      }\n    },\n    start() {\n      this.paused = false\n      this.upload()\n    },\n    pause() {\n      this.paused = true\n      this.files.forEach((file) => {\n        if (file.status === STATUS_UPLOADING) {\n          file._xhr.abort()\n          file.status = STATUS_READY\n        }\n      })\n    },\n    retry() {\n      this.retryId = Date.now()\n      this.paused = false\n      this.upload(true)\n    }\n  },\n  components: {\n    UploadBtn,\n    UploadFile\n  }\n}\n",{"version":3,"sources":["upload.vue"],"names":[],"mappings":";;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"upload.vue","sourceRoot":"node_modules/cube-ui/src/components/upload","sourcesContent":["<template>\n  <div class=\"cube-upload\">\n    <slot>\n      <div class=\"cube-upload-def clear-fix\">\n        <upload-file v-for=\"(file, i) in files\" :file=\"file\" :key=\"i\" @click=\"fileClick\"></upload-file>\n        <upload-btn :multiple=\"multiple\" :accept=\"accept\" v-show=\"isShowBtn\"></upload-btn>\n      </div>\n    </slot>\n  </div>\n</template>\n<script type=\"text/ecmascript-6\">\n  import UploadBtn from './btn.vue'\n  import UploadFile from './file.vue'\n  import ajaxUpload from './ajax'\n  import btnMixin from './btn-mixin'\n  import {\n    processFiles,\n    newFile,\n    URL,\n    STATUS_READY,\n    STATUS_UPLOADING,\n    STATUS_ERROR,\n    STATUS_SUCCESS\n  } from './util'\n\n  const COMPONENT_NAME = 'cube-upload'\n  const EVENT_INPUT = 'input'\n  const EVENT_ADDED = 'files-added'\n  const EVENT_SUBMITTED = 'file-submitted'\n  const EVENT_REMOVED = 'file-removed'\n  const EVENT_SUCCESS = 'file-success'\n  const EVENT_ERROR = 'file-error'\n  const EVENT_CLICK = 'file-click'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [btnMixin],\n    props: {\n      value: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      action: {\n        type: [String, Object],\n        default: ''\n      },\n      max: {\n        type: Number,\n        default: 10\n      },\n      auto: {\n        type: Boolean,\n        default: true\n      },\n      simultaneousUploads: {\n        type: Number,\n        default: 1\n      },\n      processFile: {\n        type: Function,\n        default: function (file, cb) {\n          cb(file)\n        }\n      }\n    },\n    data() {\n      return {\n        files: this.value,\n        paused: !this.auto\n      }\n    },\n    computed: {\n      actionOptions() {\n        const action = this.action\n        if (typeof action === 'string') {\n          return action ? {\n            target: action\n          } : null\n        } else {\n          return action\n        }\n      },\n      isShowBtn() {\n        return this.files.length < this.max\n      }\n    },\n    watch: {\n      value(newVal) {\n        this.files = newVal\n      },\n      files(newFiles) {\n        this.$emit(EVENT_INPUT, newFiles)\n      }\n    },\n    methods: {\n      addFiles(files) {\n        this.$emit(EVENT_ADDED, files)\n        const filesLen = this.files.length\n        const newFiles = []\n        const maxLen = this.max - filesLen\n        let i = 0\n        let file = files[i]\n        while (newFiles.length < maxLen && file) {\n          if (!file.ignore) {\n            newFiles.push(file)\n            this.files.push(newFile())\n          }\n          file = files[++i]\n        }\n        processFiles(newFiles, this.processFile, (file, index) => {\n          this.$set(this.files, filesLen + index, file)\n          this.$emit(EVENT_SUBMITTED, file)\n        }, () => {\n          // waiting ui\n          this.$nextTick(() => {\n            this.upload()\n          })\n        })\n      },\n      removeFile(file) {\n        this.$emit(EVENT_REMOVED, file)\n        file._xhr && file._xhr.abort()\n        if (file.url) {\n          URL.revokeObjectURL(file.url)\n        }\n        const index = this.files.indexOf(file)\n        this.files.splice(index, 1)\n        this.upload()\n      },\n      fileClick(file) {\n        this.$emit(EVENT_CLICK, file)\n      },\n      upload(retry) {\n        const options = this.actionOptions\n        if (this.paused || !options) {\n          return\n        }\n        const len = this.files.length\n        let uploadingCount = 0\n        let i = 0\n        while (i < len && uploadingCount < this.simultaneousUploads) {\n          const file = this.files[i]\n          const status = file.status\n          if (status === STATUS_READY || (retry && status === STATUS_ERROR && file._retryId !== this.retryId)) {\n            ajaxUpload(file, options, (file) => {\n              if (status === STATUS_ERROR) {\n                file._retryId = this.retryId\n              }\n              this.$emit(file.status === STATUS_SUCCESS ? EVENT_SUCCESS : EVENT_ERROR, file)\n              this.upload(retry)\n            })\n            uploadingCount++\n          } else if (status === STATUS_UPLOADING) {\n            uploadingCount++\n          }\n          i++\n        }\n      },\n      start() {\n        this.paused = false\n        this.upload()\n      },\n      pause() {\n        this.paused = true\n        this.files.forEach((file) => {\n          if (file.status === STATUS_UPLOADING) {\n            file._xhr.abort()\n            file.status = STATUS_READY\n          }\n        })\n      },\n      retry() {\n        this.retryId = Date.now()\n        this.paused = false\n        this.upload(true)\n      }\n    },\n    components: {\n      UploadBtn,\n      UploadFile\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  .cube-upload\n    position: relative\n\n  .cube-upload-def\n    margin-right: -10px\n    .cube-upload-btn, .cube-upload-file\n      float: left\n      margin: 0 10px 10px 0\n</style>\n"]}]}