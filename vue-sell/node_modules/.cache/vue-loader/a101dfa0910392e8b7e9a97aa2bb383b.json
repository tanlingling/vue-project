{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/sticky/sticky.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/sticky/sticky.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getRect,\n  prefixStyle\n} from '../../common/helpers/dom'\n\nconst COMPONENT_NAME = 'cube-sticky'\nconst EVENT_CHANGE = 'change'\nconst EVENT_DIFF_CHANGE = 'diff-change'\n\nconst transformStyleKey = prefixStyle('transform')\n\nexport default {\n  name: COMPONENT_NAME,\n  provide() {\n    return {\n      sticky: this\n    }\n  },\n  props: {\n    pos: {\n      type: Number,\n      required: true\n    },\n    checkTop: {\n      type: Boolean,\n      default: true\n    },\n    fixedShowAni: {\n      type: String,\n      default() {\n        return this.checkTop ? '' : 'cube-sticky-fixed-fade'\n      }\n    },\n    offset: {\n      type: Number,\n      default: 0\n    }\n  },\n  data() {\n    return {\n      diff: 0,\n      currentDiff: 0,\n      currentIndex: -1,\n      currentKey: ''\n    }\n  },\n  computed: {\n    fixedShow() {\n      const targetEle = this.eles[this.currentIndex]\n      return !!targetEle\n    }\n  },\n  watch: {\n    diff(newVal) {\n      if (newVal >= 0) {\n        newVal = 0\n      }\n      newVal = Math.ceil(newVal)\n      if (this._fixedTop === newVal) {\n        return\n      }\n      this._fixedTop = newVal\n      this.$refs.fixedEle.style[transformStyleKey] = `translate3d(0, ${newVal}px, 0)`\n    },\n    pos: 'computeCurrentSticky',\n    currentIndex(newIndex, oldIndex) {\n      const oldEle = this.eles[oldIndex]\n      const newEle = this.eles[newIndex]\n\n      const currentKey = (newEle && newEle.eleKey !== undefined) ? newEle.eleKey : newIndex === -1 ? '' : newIndex\n      const fixedEle = this.$refs.fixedEle\n      const fixedSlot = this.$slots.fixed || this.$scopedSlots.fixed\n\n      this.$nextTick(() => {\n        if (fixedSlot) {\n          this.fixedEleHeight = fixedEle.offsetHeight\n        } else {\n          const oldChild = fixedEle.firstElementChild\n          if (oldEle) {\n            oldEle.$el.appendChild(oldChild)\n            oldEle.refresh()\n          }\n          if (newEle) {\n            fixedEle.appendChild(newEle.$el.firstElementChild)\n            this.fixedEleHeight = fixedEle.offsetHeight\n          } else {\n            this.fixedEleHeight = 0\n          }\n        }\n      })\n\n      this.currentKey = currentKey\n      this.$emit(EVENT_CHANGE, currentKey, newIndex)\n    },\n    currentDiff(newVal) {\n      const height = this.heights[this.currentIndex] || 0\n      this.$emit(EVENT_DIFF_CHANGE, newVal, height)\n    }\n  },\n  created() {\n    this.fixedEleHeight = 0\n    this.eles = []\n    this.positions = []\n    this.heights = []\n  },\n  mounted() {\n    this.refresh()\n  },\n  methods: {\n    addEle(ele) {\n      this.eles.push(ele)\n    },\n    removeEle(ele) {\n      const i = this.eles.indexOf(ele)\n      this.eles.splice(i, 1)\n      this.positions.splice(i, 1)\n    },\n    refresh() {\n      this.$nextTick(() => {\n        this.eles.forEach((ele) => {\n          ele.refresh()\n        })\n        this._calculateHeight()\n        this.computeCurrentSticky(this.pos)\n      })\n    },\n    computeCurrentSticky(scrollY) {\n      scrollY += this.offset\n\n      const positions = this.positions\n      const heights = this.heights\n      const checkTop = this.checkTop\n\n      const len = positions.length\n      for (let i = len - 1; i >= 0; i--) {\n        const isLast = i === len - 1\n        const nextTop = isLast ? scrollY : positions[i + 1]\n        let top\n        let bottom\n        if (checkTop) {\n          top = positions[i]\n          bottom = top + heights[i]\n        } else {\n          top = positions[i] + heights[i]\n          bottom = top\n        }\n        const max = Math.max(bottom, nextTop)\n\n        if (scrollY >= top && scrollY <= max) {\n          this.currentIndex = i\n          this.currentDiff = scrollY - top\n          const diff = nextTop - scrollY\n          if (diff >= 0 && !isLast) {\n            this.diff = diff - (this.fixedEleHeight || heights[i])\n          } else {\n            this.diff = 0\n          }\n          return\n        }\n      }\n      this.currentIndex = -1\n      this.currentDiff = 0\n    },\n    _calculateHeight() {\n      const eles = this.eles\n      eles.forEach((ele, i) => {\n        const { top, height } = getRect(ele.$el)\n        this.positions[i] = top\n        this.heights[i] = height\n      })\n      this.fixedEleHeight = this.$refs.fixedEle.offsetHeight\n    }\n  }\n}\n",{"version":3,"sources":["sticky.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"sticky.vue","sourceRoot":"node_modules/cube-ui/src/components/sticky","sourcesContent":["<template>\n  <div class=\"cube-sticky\">\n    <slot></slot>\n    <transition :name=\"fixedShowAni\">\n      <div\n        ref=\"fixedEle\"\n        v-show=\"fixedShow\"\n        class=\"cube-sticky-fixed\">\n        <slot name=\"fixed\" :current=\"currentKey\" :index=\"currentIndex\"></slot>\n      </div>\n    </transition>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import {\n    getRect,\n    prefixStyle\n  } from '../../common/helpers/dom'\n\n  const COMPONENT_NAME = 'cube-sticky'\n  const EVENT_CHANGE = 'change'\n  const EVENT_DIFF_CHANGE = 'diff-change'\n\n  const transformStyleKey = prefixStyle('transform')\n\n  export default {\n    name: COMPONENT_NAME,\n    provide() {\n      return {\n        sticky: this\n      }\n    },\n    props: {\n      pos: {\n        type: Number,\n        required: true\n      },\n      checkTop: {\n        type: Boolean,\n        default: true\n      },\n      fixedShowAni: {\n        type: String,\n        default() {\n          return this.checkTop ? '' : 'cube-sticky-fixed-fade'\n        }\n      },\n      offset: {\n        type: Number,\n        default: 0\n      }\n    },\n    data() {\n      return {\n        diff: 0,\n        currentDiff: 0,\n        currentIndex: -1,\n        currentKey: ''\n      }\n    },\n    computed: {\n      fixedShow() {\n        const targetEle = this.eles[this.currentIndex]\n        return !!targetEle\n      }\n    },\n    watch: {\n      diff(newVal) {\n        if (newVal >= 0) {\n          newVal = 0\n        }\n        newVal = Math.ceil(newVal)\n        if (this._fixedTop === newVal) {\n          return\n        }\n        this._fixedTop = newVal\n        this.$refs.fixedEle.style[transformStyleKey] = `translate3d(0, ${newVal}px, 0)`\n      },\n      pos: 'computeCurrentSticky',\n      currentIndex(newIndex, oldIndex) {\n        const oldEle = this.eles[oldIndex]\n        const newEle = this.eles[newIndex]\n\n        const currentKey = (newEle && newEle.eleKey !== undefined) ? newEle.eleKey : newIndex === -1 ? '' : newIndex\n        const fixedEle = this.$refs.fixedEle\n        const fixedSlot = this.$slots.fixed || this.$scopedSlots.fixed\n\n        this.$nextTick(() => {\n          if (fixedSlot) {\n            this.fixedEleHeight = fixedEle.offsetHeight\n          } else {\n            const oldChild = fixedEle.firstElementChild\n            if (oldEle) {\n              oldEle.$el.appendChild(oldChild)\n              oldEle.refresh()\n            }\n            if (newEle) {\n              fixedEle.appendChild(newEle.$el.firstElementChild)\n              this.fixedEleHeight = fixedEle.offsetHeight\n            } else {\n              this.fixedEleHeight = 0\n            }\n          }\n        })\n\n        this.currentKey = currentKey\n        this.$emit(EVENT_CHANGE, currentKey, newIndex)\n      },\n      currentDiff(newVal) {\n        const height = this.heights[this.currentIndex] || 0\n        this.$emit(EVENT_DIFF_CHANGE, newVal, height)\n      }\n    },\n    created() {\n      this.fixedEleHeight = 0\n      this.eles = []\n      this.positions = []\n      this.heights = []\n    },\n    mounted() {\n      this.refresh()\n    },\n    methods: {\n      addEle(ele) {\n        this.eles.push(ele)\n      },\n      removeEle(ele) {\n        const i = this.eles.indexOf(ele)\n        this.eles.splice(i, 1)\n        this.positions.splice(i, 1)\n      },\n      refresh() {\n        this.$nextTick(() => {\n          this.eles.forEach((ele) => {\n            ele.refresh()\n          })\n          this._calculateHeight()\n          this.computeCurrentSticky(this.pos)\n        })\n      },\n      computeCurrentSticky(scrollY) {\n        scrollY += this.offset\n\n        const positions = this.positions\n        const heights = this.heights\n        const checkTop = this.checkTop\n\n        const len = positions.length\n        for (let i = len - 1; i >= 0; i--) {\n          const isLast = i === len - 1\n          const nextTop = isLast ? scrollY : positions[i + 1]\n          let top\n          let bottom\n          if (checkTop) {\n            top = positions[i]\n            bottom = top + heights[i]\n          } else {\n            top = positions[i] + heights[i]\n            bottom = top\n          }\n          const max = Math.max(bottom, nextTop)\n\n          if (scrollY >= top && scrollY <= max) {\n            this.currentIndex = i\n            this.currentDiff = scrollY - top\n            const diff = nextTop - scrollY\n            if (diff >= 0 && !isLast) {\n              this.diff = diff - (this.fixedEleHeight || heights[i])\n            } else {\n              this.diff = 0\n            }\n            return\n          }\n        }\n        this.currentIndex = -1\n        this.currentDiff = 0\n      },\n      _calculateHeight() {\n        const eles = this.eles\n        eles.forEach((ele, i) => {\n          const { top, height } = getRect(ele.$el)\n          this.positions[i] = top\n          this.heights[i] = height\n        })\n        this.fixedEleHeight = this.$refs.fixedEle.offsetHeight\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  .cube-sticky\n    position: relative\n    height: 100%\n    overflow: hidden\n  .cube-sticky-fixed\n    z-index: 1\n    position: absolute\n    top: 0\n    left: 0\n    right: 0\n  .cube-sticky-fixed-fade-enter, .cube-sticky-fixed-fade-leave-active\n    opacity: 0\n  .cube-sticky-fixed-fade-enter-active, .cube-sticky-fixed-fade-leave-active\n    transition: all .2s ease-in-out\n</style>\n"]}]}