{"remainingRequest":"/Users/tanlingling/Desktop/project-e/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/project-e/sell/node_modules/cube-ui/src/components/rate/rate.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/project-e/sell/node_modules/cube-ui/src/components/rate/rate.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/project-e/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/project-e/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/project-e/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/project-e/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CubeRateItem from './rate-item.vue'\nconst COMPONENT_NAME = 'cube-rate'\nconst EVENT_INPUT = 'input'\n\nconst EVENT_TYPE_MOUSE = 'mouse'\n\nexport default {\n  name: COMPONENT_NAME,\n  props: {\n    value: {\n      type: Number,\n      default: 0\n    },\n    max: {\n      type: Number,\n      default: 5\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    justify: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data() {\n    return {\n      tempValue: this.value\n    }\n  },\n  created() {\n    this.mousePressed = false\n  },\n  computed: {\n    rateClass() {\n      return this.justify && 'cube-rate-justify'\n    }\n  },\n  watch: {\n    value(val) {\n      if (val !== this.tempValue) {\n        this.tempValue = val\n      }\n    }\n  },\n  methods: {\n    handleStart(e) {\n      if (!this.disabled) {\n        if (e.type.indexOf(EVENT_TYPE_MOUSE) > -1) {\n          this.mousePressed = true\n          document.addEventListener('mouseup', this.handleEnd)\n          document.addEventListener('mousemove', this.handleMove)\n        }\n        const rect = this.$refs.rateContainer.getBoundingClientRect()\n        this.left = rect.left\n        this.containerWidth = rect.width\n      }\n    },\n    handleMove(e) {\n      if (!this.disabled && (e.type.indexOf(EVENT_TYPE_MOUSE) === -1 || this.mousePressed)) {\n        this.computeTempValue(e.type.indexOf(EVENT_TYPE_MOUSE) === -1 ? e.touches[0] : e)\n      }\n    },\n    handleEnd(e) {\n      if (!this.disabled && (e.type.indexOf(EVENT_TYPE_MOUSE) === -1 || this.mousePressed)) {\n        if (e.type.indexOf(EVENT_TYPE_MOUSE) > -1) {\n          this.mousePressed = false\n          document.removeEventListener('mouseup', this.handleEnd)\n          document.removeEventListener('mousemove', this.handleMove)\n        }\n        this.computeTempValue(e.type.indexOf(EVENT_TYPE_MOUSE) > -1 ? e : e.changedTouches[0])\n        this.$emit(EVENT_INPUT, this.tempValue)\n      }\n    },\n    computeTempValue(touch) {\n      let leftAmount = Math.ceil((touch.clientX - this.left) / this.containerWidth * this.max)\n      if (leftAmount > 0 && leftAmount <= this.max) {\n        this.tempValue = leftAmount\n      } else if (leftAmount <= 0) {\n        this.tempValue = 0\n      } else {\n        this.tempValue = this.max\n      }\n    }\n  },\n  components: {\n    CubeRateItem\n  }\n}\n",{"version":3,"sources":["rate.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAkBA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rate.vue","sourceRoot":"node_modules/cube-ui/src/components/rate","sourcesContent":["<template>\n  <!-- the preventDefault of touchmove is to prevent any default action caused by any touchmove event associated with the same active touch point, such as scrolling. -->\n  <ul ref=\"rateContainer\"\n      class=\"cube-rate\"\n      :class=\"rateClass\"\n      @touchstart.stop=\"handleStart\"\n      @touchmove.stop.prevent=\"handleMove\"\n      @touchend.stop=\"handleEnd\"\n      @mousedown.stop=\"handleStart\"\n      @mousemove.stop=\"handleMove\"\n      @mouseup.stop=\"handleEnd\">\n      <slot>\n        <cube-rate-item v-for=\"n in max\" :key=\"n\" :index=\"n\"></cube-rate-item>\n      </slot>\n    </ul>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import CubeRateItem from './rate-item.vue'\n  const COMPONENT_NAME = 'cube-rate'\n  const EVENT_INPUT = 'input'\n\n  const EVENT_TYPE_MOUSE = 'mouse'\n\n  export default {\n    name: COMPONENT_NAME,\n    props: {\n      value: {\n        type: Number,\n        default: 0\n      },\n      max: {\n        type: Number,\n        default: 5\n      },\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      justify: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        tempValue: this.value\n      }\n    },\n    created() {\n      this.mousePressed = false\n    },\n    computed: {\n      rateClass() {\n        return this.justify && 'cube-rate-justify'\n      }\n    },\n    watch: {\n      value(val) {\n        if (val !== this.tempValue) {\n          this.tempValue = val\n        }\n      }\n    },\n    methods: {\n      handleStart(e) {\n        if (!this.disabled) {\n          if (e.type.indexOf(EVENT_TYPE_MOUSE) > -1) {\n            this.mousePressed = true\n            document.addEventListener('mouseup', this.handleEnd)\n            document.addEventListener('mousemove', this.handleMove)\n          }\n          const rect = this.$refs.rateContainer.getBoundingClientRect()\n          this.left = rect.left\n          this.containerWidth = rect.width\n        }\n      },\n      handleMove(e) {\n        if (!this.disabled && (e.type.indexOf(EVENT_TYPE_MOUSE) === -1 || this.mousePressed)) {\n          this.computeTempValue(e.type.indexOf(EVENT_TYPE_MOUSE) === -1 ? e.touches[0] : e)\n        }\n      },\n      handleEnd(e) {\n        if (!this.disabled && (e.type.indexOf(EVENT_TYPE_MOUSE) === -1 || this.mousePressed)) {\n          if (e.type.indexOf(EVENT_TYPE_MOUSE) > -1) {\n            this.mousePressed = false\n            document.removeEventListener('mouseup', this.handleEnd)\n            document.removeEventListener('mousemove', this.handleMove)\n          }\n          this.computeTempValue(e.type.indexOf(EVENT_TYPE_MOUSE) > -1 ? e : e.changedTouches[0])\n          this.$emit(EVENT_INPUT, this.tempValue)\n        }\n      },\n      computeTempValue(touch) {\n        let leftAmount = Math.ceil((touch.clientX - this.left) / this.containerWidth * this.max)\n        if (leftAmount > 0 && leftAmount <= this.max) {\n          this.tempValue = leftAmount\n        } else if (leftAmount <= 0) {\n          this.tempValue = 0\n        } else {\n          this.tempValue = this.max\n        }\n      }\n    },\n    components: {\n      CubeRateItem\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-rate\n    list-style: none\n    display: inline-flex\n    vertical-align: top\n    flex-wrap: nowrap\n    max-width: 100%\n  .cube-rate-justify\n    width: 100%\n    justify-content: space-between\n</style>\n"]}]}