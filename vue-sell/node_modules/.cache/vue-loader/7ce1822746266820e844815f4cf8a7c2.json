{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/time-picker/time-picker.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/time-picker/time-picker.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  pad,\n  formatDate,\n  getZeroStamp,\n  getDayDiff,\n  DAY_TIMESTAMP,\n  HOUR_TIMESTAMP,\n  MINUTE_TIMESTAMP\n} from '../../common/lang/date'\nimport visibilityMixin from '../../common/mixins/visibility'\nimport popupMixin from '../../common/mixins/popup'\nimport pickerMixin from '../../common/mixins/picker'\nimport localeMixin from '../../common/mixins/locale'\nimport CubeCascadePicker from '../cascade-picker/cascade-picker.vue'\nimport { warn } from '../../common/helpers/debug'\n\nconst COMPONENT_NAME = 'cube-time-picker'\nconst EVENT_SELECT = 'select'\nconst EVENT_CANCEL = 'cancel'\nconst EVENT_CHANGE = 'change'\n\nconst NOW = {\n  value: 'now'\n}\n\nconst INT_RULE = {\n  floor: 'floor',\n  ceil: 'ceil',\n  round: 'round'\n}\n\nconst DEFAULT_STEP = 10\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin, pickerMixin, localeMixin],\n  components: {\n    CubeCascadePicker\n  },\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    delay: {\n      type: Number,\n      default: 15\n    },\n    day: {\n      type: Object,\n      default() {\n        return {\n          len: 3\n        }\n      }\n    },\n    showNow: {\n      type: [Boolean, Object],\n      default: true\n    },\n    minuteStep: {\n      type: [Number, Object],\n      default: DEFAULT_STEP\n    },\n    format: {\n      type: String,\n      default: 'YYYY/M/D hh:mm'\n    },\n    min: {\n      type: [Date, Number],\n      default: null\n    },\n    max: {\n      type: [Date, Number],\n      default: null\n    }\n  },\n  data() {\n    return {\n      now: new Date(),\n      selectedIndex: [0, 0, 0],\n      value: 0\n    }\n  },\n  computed: {\n    _title () {\n      return this.title || this.$t('selectTime')\n    },\n    _day () {\n      const defaultDay = {\n        filter: [this.$t('today')],\n        format: this.$t('formatDate')\n      }\n      return Object.assign({}, defaultDay, this.day)\n    },\n    nowText() {\n      const defaultText = this.$t('now')\n      return (this.showNow && this.showNow.text) || defaultText\n    },\n    minuteStepRule() {\n      const minuteStep = this.minuteStep\n      return (typeof minuteStep === 'object' && Math[INT_RULE[minuteStep.rule]]) || Math[INT_RULE.floor]\n    },\n    minuteStepNumber() {\n      const minuteStep = this.minuteStep\n      return typeof minuteStep === 'number' ? minuteStep : (minuteStep.step || DEFAULT_STEP)\n    },\n    minTime() {\n      let minTimeStamp = +this.min || +this.now + this.delay * MINUTE_TIMESTAMP\n\n      // Handle the minTime selectable change caused by minute step.\n      const minute = new Date(minTimeStamp).getMinutes()\n      const intMinute = Math.min(this.minuteStepRule(minute / this.minuteStepNumber) * this.minuteStepNumber, 60)\n\n      minTimeStamp += (intMinute - minute) * MINUTE_TIMESTAMP\n      return new Date(minTimeStamp)\n    },\n    maxTime() {\n      let maxTimeStamp = +this.max || (getZeroStamp(new Date(+this.minTime + this._day.len * DAY_TIMESTAMP)) - 1)\n\n      const minute = new Date(maxTimeStamp).getMinutes()\n      const intMinute = Math.floor(minute / this.minuteStepNumber) * this.minuteStepNumber\n      maxTimeStamp -= (minute - intMinute) * MINUTE_TIMESTAMP\n\n      return new Date(maxTimeStamp)\n    },\n    days() {\n      const days = []\n      const dayDiff = getDayDiff(this.minTime, this.now)\n      const len = this.max ? getDayDiff(this.maxTime, this.minTime) + 1 : this._day.len\n\n      for (let i = 0; i < len; i++) {\n        const timestamp = +this.minTime + i * DAY_TIMESTAMP\n        days.push({\n          value: timestamp,\n          text: (this._day.filter && this._day.filter[dayDiff + i]) || formatDate(new Date(timestamp), this._day.format)\n        })\n      }\n      return days\n    },\n    hours() {\n      const hours = []\n      for (let i = 0; i < 24; i++) {\n        hours.push({\n          value: i,\n          text: `${i}${this.$t('hours')}`,\n          children: this.minutes\n        })\n      }\n      return hours\n    },\n    minutes() {\n      const minutes = []\n      for (let i = 0; i < 60; i += this.minuteStepNumber) {\n        minutes.push({\n          value: i,\n          text: `${pad(i)}${this.$t('minutes')}`\n        })\n      }\n      return minutes\n    },\n    cascadeData() {\n      const days = this.days.slice()\n\n      // When the maxTime is smaller than minTime by more than a minute step, there is no option could be chosen.\n      if (this.maxTime - this.minTime <= -60000) {\n        warn('The max is smaller than the min optional time.', COMPONENT_NAME)\n        return []\n      }\n\n      days.forEach((day, index) => {\n        const isMinDay = index === 0\n        const isMaxDay = index === days.length - 1\n\n        if (!isMinDay && !isMaxDay) {\n          day.children = this.hours\n          return\n        }\n\n        const partHours = []\n        const minHour = isMinDay ? this.minTime.getHours() : 0\n        const maxHour = isMaxDay ? this.maxTime.getHours() : 23\n\n        for (let i = minHour; i <= maxHour; i++) {\n          const isMinHour = isMinDay && i === minHour\n          const isMaxHour = isMaxDay && i === maxHour\n\n          if (!isMinHour && !isMaxHour) {\n            partHours.push({\n              value: i,\n              text: `${i}${this.$t('hours')}`,\n              children: this.minutes\n            })\n            continue\n          }\n\n          // Math.round is use to avoid some weird float bug of multiplication and divisionluate in JavaScript. Because we have to ensure the arguments of Array.slice are int.\n          const start = isMinHour ? Math.round(this.minTime.getMinutes() / this.minuteStepNumber) : 0\n          const end = isMaxHour ? Math.round(this.maxTime.getMinutes() / this.minuteStepNumber) : Math.floor(59 / this.minuteStepNumber)\n\n          const partMinutes = this.minutes.slice(start, end + 1)\n          partHours.push({\n            value: i,\n            text: `${i}${this.$t('hours')}`,\n            children: partMinutes\n          })\n        }\n\n        day.children = partHours\n      })\n\n      if (this.showNow) {\n        days[0].children.unshift({\n          value: NOW.value,\n          text: this.nowText,\n          children: []\n        })\n      }\n\n      return days\n    }\n  },\n  methods: {\n    show() {\n      if (this.isVisible) {\n        return\n      }\n      this.isVisible = true\n\n      this._updateNow()\n      this._updateSelectedIndex()\n    },\n    setTime(value) {\n      this.value = value\n\n      this.isVisible && this._updateSelectedIndex()\n    },\n    _updateSelectedIndex() {\n      const value = this.value\n      const minTime = this.minTime\n\n      if (value <= +minTime) {\n        this.selectedIndex = [0, 0, 0]\n      } else {\n        // calculate dayIndex\n        const valueDate = new Date(value)\n        const dayIndex = getDayDiff(valueDate, minTime)\n\n        if (dayIndex >= this.days.length) {\n          warn('Use \"setTime\" to set a time exceeded to the option range do not actually work.', COMPONENT_NAME)\n          return\n        }\n\n        // calculate hourIndex\n        const hour = valueDate.getHours()\n        const beginHour = dayIndex === 0\n                          ? this.showNow ? this.minTime.getHours() - 1 : this.minTime.getHours()\n                          : 0\n        const hourIndex = hour - beginHour\n\n        // calculate minuteIndex\n        const minute = this.minuteStepRule(valueDate.getMinutes() / this.minuteStepNumber)\n        const beginMinute = !dayIndex && (this.showNow ? hourIndex === 1 : !hourIndex)\n                            ? this.minuteStepRule(this.minTime.getMinutes() / this.minuteStepNumber)\n                            : 0\n        const minuteIndex = minute - beginMinute\n\n        this.selectedIndex = [dayIndex, hourIndex, minuteIndex]\n      }\n    },\n    _updateNow() {\n      this.now = new Date()\n    },\n    _pickerChange(i, newIndex) {\n      this.$emit(EVENT_CHANGE, i, newIndex)\n    },\n    _pickerSelect(selectedVal, selectedIndex, selectedText) {\n      let timestamp\n      let text\n      if (selectedVal[1] === NOW.value) {\n        timestamp = +new Date()\n        text = this.nowText\n      } else {\n        timestamp = getZeroStamp(new Date(selectedVal[0])) + selectedVal[1] * HOUR_TIMESTAMP + selectedVal[2] * MINUTE_TIMESTAMP\n        text = selectedText[0] + ' ' + selectedText[1] + ':' + selectedText[2]\n      }\n\n      this.value = timestamp\n      const formatedTime = formatDate(new Date(timestamp), this.format)\n      this.$emit(EVENT_SELECT, timestamp, text, formatedTime)\n    },\n    _pickerCancel() {\n      this.$emit(EVENT_CANCEL)\n    }\n  }\n}\n",{"version":3,"sources":["time-picker.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"time-picker.vue","sourceRoot":"node_modules/cube-ui/src/components/time-picker","sourcesContent":["<template>\n  <cube-cascade-picker\n    ref=\"picker\"\n    v-model=\"isVisible\"\n    :data=\"cascadeData\"\n    :selected-index=\"selectedIndex\"\n    :title=\"_title\"\n    :subtitle=\"subtitle\"\n    :cancel-txt=\"_cancelTxt\"\n    :confirm-txt=\"_confirmTxt\"\n    :swipe-time=\"swipeTime\"\n    :z-index=\"zIndex\"\n    :mask-closable=\"maskClosable\"\n    @select=\"_pickerSelect\"\n    @cancel=\"_pickerCancel\"\n    @change=\"_pickerChange\">\n  </cube-cascade-picker>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import {\n    pad,\n    formatDate,\n    getZeroStamp,\n    getDayDiff,\n    DAY_TIMESTAMP,\n    HOUR_TIMESTAMP,\n    MINUTE_TIMESTAMP\n  } from '../../common/lang/date'\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n  import pickerMixin from '../../common/mixins/picker'\n  import localeMixin from '../../common/mixins/locale'\n  import CubeCascadePicker from '../cascade-picker/cascade-picker.vue'\n  import { warn } from '../../common/helpers/debug'\n\n  const COMPONENT_NAME = 'cube-time-picker'\n  const EVENT_SELECT = 'select'\n  const EVENT_CANCEL = 'cancel'\n  const EVENT_CHANGE = 'change'\n\n  const NOW = {\n    value: 'now'\n  }\n\n  const INT_RULE = {\n    floor: 'floor',\n    ceil: 'ceil',\n    round: 'round'\n  }\n\n  const DEFAULT_STEP = 10\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin, pickerMixin, localeMixin],\n    components: {\n      CubeCascadePicker\n    },\n    props: {\n      title: {\n        type: String,\n        default: ''\n      },\n      delay: {\n        type: Number,\n        default: 15\n      },\n      day: {\n        type: Object,\n        default() {\n          return {\n            len: 3\n          }\n        }\n      },\n      showNow: {\n        type: [Boolean, Object],\n        default: true\n      },\n      minuteStep: {\n        type: [Number, Object],\n        default: DEFAULT_STEP\n      },\n      format: {\n        type: String,\n        default: 'YYYY/M/D hh:mm'\n      },\n      min: {\n        type: [Date, Number],\n        default: null\n      },\n      max: {\n        type: [Date, Number],\n        default: null\n      }\n    },\n    data() {\n      return {\n        now: new Date(),\n        selectedIndex: [0, 0, 0],\n        value: 0\n      }\n    },\n    computed: {\n      _title () {\n        return this.title || this.$t('selectTime')\n      },\n      _day () {\n        const defaultDay = {\n          filter: [this.$t('today')],\n          format: this.$t('formatDate')\n        }\n        return Object.assign({}, defaultDay, this.day)\n      },\n      nowText() {\n        const defaultText = this.$t('now')\n        return (this.showNow && this.showNow.text) || defaultText\n      },\n      minuteStepRule() {\n        const minuteStep = this.minuteStep\n        return (typeof minuteStep === 'object' && Math[INT_RULE[minuteStep.rule]]) || Math[INT_RULE.floor]\n      },\n      minuteStepNumber() {\n        const minuteStep = this.minuteStep\n        return typeof minuteStep === 'number' ? minuteStep : (minuteStep.step || DEFAULT_STEP)\n      },\n      minTime() {\n        let minTimeStamp = +this.min || +this.now + this.delay * MINUTE_TIMESTAMP\n\n        // Handle the minTime selectable change caused by minute step.\n        const minute = new Date(minTimeStamp).getMinutes()\n        const intMinute = Math.min(this.minuteStepRule(minute / this.minuteStepNumber) * this.minuteStepNumber, 60)\n\n        minTimeStamp += (intMinute - minute) * MINUTE_TIMESTAMP\n        return new Date(minTimeStamp)\n      },\n      maxTime() {\n        let maxTimeStamp = +this.max || (getZeroStamp(new Date(+this.minTime + this._day.len * DAY_TIMESTAMP)) - 1)\n\n        const minute = new Date(maxTimeStamp).getMinutes()\n        const intMinute = Math.floor(minute / this.minuteStepNumber) * this.minuteStepNumber\n        maxTimeStamp -= (minute - intMinute) * MINUTE_TIMESTAMP\n\n        return new Date(maxTimeStamp)\n      },\n      days() {\n        const days = []\n        const dayDiff = getDayDiff(this.minTime, this.now)\n        const len = this.max ? getDayDiff(this.maxTime, this.minTime) + 1 : this._day.len\n\n        for (let i = 0; i < len; i++) {\n          const timestamp = +this.minTime + i * DAY_TIMESTAMP\n          days.push({\n            value: timestamp,\n            text: (this._day.filter && this._day.filter[dayDiff + i]) || formatDate(new Date(timestamp), this._day.format)\n          })\n        }\n        return days\n      },\n      hours() {\n        const hours = []\n        for (let i = 0; i < 24; i++) {\n          hours.push({\n            value: i,\n            text: `${i}${this.$t('hours')}`,\n            children: this.minutes\n          })\n        }\n        return hours\n      },\n      minutes() {\n        const minutes = []\n        for (let i = 0; i < 60; i += this.minuteStepNumber) {\n          minutes.push({\n            value: i,\n            text: `${pad(i)}${this.$t('minutes')}`\n          })\n        }\n        return minutes\n      },\n      cascadeData() {\n        const days = this.days.slice()\n\n        // When the maxTime is smaller than minTime by more than a minute step, there is no option could be chosen.\n        if (this.maxTime - this.minTime <= -60000) {\n          warn('The max is smaller than the min optional time.', COMPONENT_NAME)\n          return []\n        }\n\n        days.forEach((day, index) => {\n          const isMinDay = index === 0\n          const isMaxDay = index === days.length - 1\n\n          if (!isMinDay && !isMaxDay) {\n            day.children = this.hours\n            return\n          }\n\n          const partHours = []\n          const minHour = isMinDay ? this.minTime.getHours() : 0\n          const maxHour = isMaxDay ? this.maxTime.getHours() : 23\n\n          for (let i = minHour; i <= maxHour; i++) {\n            const isMinHour = isMinDay && i === minHour\n            const isMaxHour = isMaxDay && i === maxHour\n\n            if (!isMinHour && !isMaxHour) {\n              partHours.push({\n                value: i,\n                text: `${i}${this.$t('hours')}`,\n                children: this.minutes\n              })\n              continue\n            }\n\n            // Math.round is use to avoid some weird float bug of multiplication and divisionluate in JavaScript. Because we have to ensure the arguments of Array.slice are int.\n            const start = isMinHour ? Math.round(this.minTime.getMinutes() / this.minuteStepNumber) : 0\n            const end = isMaxHour ? Math.round(this.maxTime.getMinutes() / this.minuteStepNumber) : Math.floor(59 / this.minuteStepNumber)\n\n            const partMinutes = this.minutes.slice(start, end + 1)\n            partHours.push({\n              value: i,\n              text: `${i}${this.$t('hours')}`,\n              children: partMinutes\n            })\n          }\n\n          day.children = partHours\n        })\n\n        if (this.showNow) {\n          days[0].children.unshift({\n            value: NOW.value,\n            text: this.nowText,\n            children: []\n          })\n        }\n\n        return days\n      }\n    },\n    methods: {\n      show() {\n        if (this.isVisible) {\n          return\n        }\n        this.isVisible = true\n\n        this._updateNow()\n        this._updateSelectedIndex()\n      },\n      setTime(value) {\n        this.value = value\n\n        this.isVisible && this._updateSelectedIndex()\n      },\n      _updateSelectedIndex() {\n        const value = this.value\n        const minTime = this.minTime\n\n        if (value <= +minTime) {\n          this.selectedIndex = [0, 0, 0]\n        } else {\n          // calculate dayIndex\n          const valueDate = new Date(value)\n          const dayIndex = getDayDiff(valueDate, minTime)\n\n          if (dayIndex >= this.days.length) {\n            warn('Use \"setTime\" to set a time exceeded to the option range do not actually work.', COMPONENT_NAME)\n            return\n          }\n\n          // calculate hourIndex\n          const hour = valueDate.getHours()\n          const beginHour = dayIndex === 0\n                            ? this.showNow ? this.minTime.getHours() - 1 : this.minTime.getHours()\n                            : 0\n          const hourIndex = hour - beginHour\n\n          // calculate minuteIndex\n          const minute = this.minuteStepRule(valueDate.getMinutes() / this.minuteStepNumber)\n          const beginMinute = !dayIndex && (this.showNow ? hourIndex === 1 : !hourIndex)\n                              ? this.minuteStepRule(this.minTime.getMinutes() / this.minuteStepNumber)\n                              : 0\n          const minuteIndex = minute - beginMinute\n\n          this.selectedIndex = [dayIndex, hourIndex, minuteIndex]\n        }\n      },\n      _updateNow() {\n        this.now = new Date()\n      },\n      _pickerChange(i, newIndex) {\n        this.$emit(EVENT_CHANGE, i, newIndex)\n      },\n      _pickerSelect(selectedVal, selectedIndex, selectedText) {\n        let timestamp\n        let text\n        if (selectedVal[1] === NOW.value) {\n          timestamp = +new Date()\n          text = this.nowText\n        } else {\n          timestamp = getZeroStamp(new Date(selectedVal[0])) + selectedVal[1] * HOUR_TIMESTAMP + selectedVal[2] * MINUTE_TIMESTAMP\n          text = selectedText[0] + ' ' + selectedText[1] + ':' + selectedText[2]\n        }\n\n        this.value = timestamp\n        const formatedTime = formatDate(new Date(timestamp), this.format)\n        this.$emit(EVENT_SELECT, timestamp, text, formatedTime)\n      },\n      _pickerCancel() {\n        this.$emit(EVENT_CANCEL)\n      }\n    }\n  }\n</script>\n"]}]}