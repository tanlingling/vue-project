{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/drawer/drawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/drawer/drawer.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { prefixStyle } from '../../common/helpers/dom'\nimport CubeDrawerPanel from './drawer-panel.vue'\nimport visibilityMixin from '../../common/mixins/visibility'\nimport popupMixin from '../../common/mixins/popup'\n\nconst COMPONENT_NAME = 'cube-drawer'\nconst EVENT_CHANGE = 'change'\nconst EVENT_SELECT = 'select'\nconst EVENT_CANCEL = 'cancel'\n\nconst transform = prefixStyle('transform')\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    data: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return []\n      }\n    },\n    selectedIndex: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return []\n      }\n    }\n  },\n  data() {\n    return {\n      index: -1,\n      selectedVal: [],\n      selectedText: [],\n      selected: [...this.selectedIndex],\n      slideStyle: {\n        [transform]: 'translate3d(0, 0, 0)'\n      }\n    }\n  },\n  watch: {\n    selectedIndex(newVal) {\n      this.selected = [...newVal]\n    },\n    index(newIndex, oldIndex) {\n      this.showPanel()\n      if (newIndex < oldIndex) {\n        this.hidePanel()\n      }\n    }\n  },\n  created() {\n    this.panels = []\n  },\n  methods: {\n    show() {\n      if (this.isVisible) {\n        return\n      }\n      this.isVisible = true\n\n      let len = this.data.length\n      for (let i = 0; i < len; i++) {\n        this.index = i\n        if (this.selected[i] < 0 || this.selected[i] === undefined) {\n          if (i > 0) {\n            const lastIndex = i - 1\n            const index = this.selected[lastIndex]\n            this.changeHandler(lastIndex, this.data[lastIndex][index], index)\n          }\n          break\n        }\n      }\n      this.computedStyle()\n    },\n    hide() {\n      this.slideStyle[transform] = 'translate3d(0, 0, 0)'\n      this.shouldHide = true\n    },\n    addPanel(panel) {\n      this.panels.push(panel)\n    },\n    removePanel(panel) {\n      const i = this.panels.indexOf(panel)\n      this.panels.splice(i, 1)\n    },\n    transitionend() {\n      if (this.shouldHide) {\n        this.isVisible = false\n        this.shouldHide = false\n      }\n    },\n    refill(panelIndex, data, index) {\n      this.$set(this.data, panelIndex, data)\n      this.index = panelIndex\n      this.selected = this.selected.slice(0, panelIndex)\n      this.selectedVal = this.selectedVal.slice(0, panelIndex)\n      this.selectedText = this.selectedText.slice(0, panelIndex)\n      if (index >= 0) {\n        this.$set(this.selected, panelIndex, index)\n        this.changeHandler(panelIndex, this.data[panelIndex][index], index)\n      }\n    },\n    showPanel() {\n      const index = this.index\n      let i = 0\n      while (i <= index) {\n        this.panels[i].show()\n        i++\n      }\n      this.computedStyle()\n    },\n    hidePanel() {\n      const len = this.data.length\n      let i = this.index + 1\n      while (i < len) {\n        this.panels[i].hide()\n        i++\n      }\n    },\n    computedStyle() {\n      this.$nextTick(() => {\n        let allWidth = 0\n        let i = 0\n        const index = this.index\n        while (i <= index) {\n          const el = this.panels[i].$el\n          allWidth += el.offsetWidth\n          const elStyle = window.getComputedStyle(el)\n          allWidth += parseInt(elStyle.marginLeft)\n          allWidth += parseInt(elStyle.marginRight)\n          i++\n        }\n        this.slideStyle[transform] = `translate3d(-${allWidth}px, 0, 0)`\n      })\n    },\n    changeHandler(panelIndex, item, index) {\n      if (typeof item === 'string') {\n        this.selectedVal[panelIndex] = item\n        this.selectedText[panelIndex] = item\n      } else {\n        this.selectedVal[panelIndex] = item.value\n        this.selectedText[panelIndex] = item.text\n      }\n      this.$set(this.selected, panelIndex, index)\n      if (panelIndex === (this.data.length - 1)) {\n        // last column\n        this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText)\n        this.hide()\n      } else {\n        this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText)\n      }\n    },\n    drawerClick() {\n      this.hide()\n      this.$emit(EVENT_CANCEL)\n    }\n  },\n  components: {\n    CubeDrawerPanel\n  }\n}\n",{"version":3,"sources":["drawer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAofile":"drawer.vue","sourceRoot":"node_modules/cube-ui/src/components/drawer","sourcesContent":["<template>\n  <div class=\"cube-drawer\" @click=\"drawerClick\" v-show=\"isVisible\">\n    <div class=\"cube-drawer-main\" :style=\"slideStyle\" @click.stop @transitionend=\"transitionend\">\n      <div class=\"cube-drawer-title\" v-show=\"$slots.title || title\">\n        <slot name=\"title\">{{title}}</slot>\n      </div>\n      <div class=\"cube-drawer-panels\" @transitionend.stop>\n        <slot>\n          <cube-drawer-panel\n            v-for=\"(panel, index) in data\"\n            :key=\"index\"\n            :index=\"index\"\n            :data=\"panel\" />\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { prefixStyle } from '../../common/helpers/dom'\n  import CubeDrawerPanel from './drawer-panel.vue'\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n\n  const COMPONENT_NAME = 'cube-drawer'\n  const EVENT_CHANGE = 'change'\n  const EVENT_SELECT = 'select'\n  const EVENT_CANCEL = 'cancel'\n\n  const transform = prefixStyle('transform')\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin],\n    props: {\n      title: {\n        type: String,\n        default: ''\n      },\n      data: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      selectedIndex: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      }\n    },\n    data() {\n      return {\n        index: -1,\n        selectedVal: [],\n        selectedText: [],\n        selected: [...this.selectedIndex],\n        slideStyle: {\n          [transform]: 'translate3d(0, 0, 0)'\n        }\n      }\n    },\n    watch: {\n      selectedIndex(newVal) {\n        this.selected = [...newVal]\n      },\n      index(newIndex, oldIndex) {\n        this.showPanel()\n        if (newIndex < oldIndex) {\n          this.hidePanel()\n        }\n      }\n    },\n    created() {\n      this.panels = []\n    },\n    methods: {\n      show() {\n        if (this.isVisible) {\n          return\n        }\n        this.isVisible = true\n\n        let len = this.data.length\n        for (let i = 0; i < len; i++) {\n          this.index = i\n          if (this.selected[i] < 0 || this.selected[i] === undefined) {\n            if (i > 0) {\n              const lastIndex = i - 1\n              const index = this.selected[lastIndex]\n              this.changeHandler(lastIndex, this.data[lastIndex][index], index)\n            }\n            break\n          }\n        }\n        this.computedStyle()\n      },\n      hide() {\n        this.slideStyle[transform] = 'translate3d(0, 0, 0)'\n        this.shouldHide = true\n      },\n      addPanel(panel) {\n        this.panels.push(panel)\n      },\n      removePanel(panel) {\n        const i = this.panels.indexOf(panel)\n        this.panels.splice(i, 1)\n      },\n      transitionend() {\n        if (this.shouldHide) {\n          this.isVisible = false\n          this.shouldHide = false\n        }\n      },\n      refill(panelIndex, data, index) {\n        this.$set(this.data, panelIndex, data)\n        this.index = panelIndex\n        this.selected = this.selected.slice(0, panelIndex)\n        this.selectedVal = this.selectedVal.slice(0, panelIndex)\n        this.selectedText = this.selectedText.slice(0, panelIndex)\n        if (index >= 0) {\n          this.$set(this.selected, panelIndex, index)\n          this.changeHandler(panelIndex, this.data[panelIndex][index], index)\n        }\n      },\n      showPanel() {\n        const index = this.index\n        let i = 0\n        while (i <= index) {\n          this.panels[i].show()\n          i++\n        }\n        this.computedStyle()\n      },\n      hidePanel() {\n        const len = this.data.length\n        let i = this.index + 1\n        while (i < len) {\n          this.panels[i].hide()\n          i++\n        }\n      },\n      computedStyle() {\n        this.$nextTick(() => {\n          let allWidth = 0\n          let i = 0\n          const index = this.index\n          while (i <= index) {\n            const el = this.panels[i].$el\n            allWidth += el.offsetWidth\n            const elStyle = window.getComputedStyle(el)\n            allWidth += parseInt(elStyle.marginLeft)\n            allWidth += parseInt(elStyle.marginRight)\n            i++\n          }\n          this.slideStyle[transform] = `translate3d(-${allWidth}px, 0, 0)`\n        })\n      },\n      changeHandler(panelIndex, item, index) {\n        if (typeof item === 'string') {\n          this.selectedVal[panelIndex] = item\n          this.selectedText[panelIndex] = item\n        } else {\n          this.selectedVal[panelIndex] = item.value\n          this.selectedText[panelIndex] = item.text\n        }\n        this.$set(this.selected, panelIndex, index)\n        if (panelIndex === (this.data.length - 1)) {\n          // last column\n          this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText)\n          this.hide()\n        } else {\n          this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText)\n        }\n      },\n      drawerClick() {\n        this.hide()\n        this.$emit(EVENT_CANCEL)\n      }\n    },\n    components: {\n      CubeDrawerPanel\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-drawer\n    position: absolute\n    z-index: 5\n    top: 0\n    right: 0\n    bottom: 0\n    left: 0\n    overflow: hidden\n    color: $drawer-color\n  .cube-drawer-main\n    position: absolute\n    top: 0\n    left: 100%\n    bottom: 0\n    max-width: 90%\n    display: flex\n    flex-direction: column\n    overflow: hidden\n    transform: translate3d(0, 0, 0)\n    transition: transform .3s ease-in-out\n    box-shadow: -2px 0 2px rgba(0, 0, 0, .2)\n  .cube-drawer-title\n    position: relative\n    padding: 0 20px\n    height: 50px\n    line-height: 50px\n    border-bottom: 1px solid $drawer-title-bdc\n    font-size: $fontsize-large\n    background-color: $drawer-title-bgc\n  .cube-drawer-panels\n    display: flex\n    flex: 1\n</style>\n"]}]}