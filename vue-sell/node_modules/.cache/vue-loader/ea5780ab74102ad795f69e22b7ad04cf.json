{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/swipe/swipe-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/swipe/swipe-item.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport {\n  getRect,\n  prefixStyle\n} from '../../common/helpers/dom'\n\nimport { easeOutQuart, easeOutCubic } from '../../common/helpers/ease'\nimport { getNow } from '../../common/lang/date'\n\nconst COMPONENT_NAME = 'cube-swipe-item'\nconst EVENT_ITEM_CLICK = 'item-click'\nconst EVENT_BTN_CLICK = 'btn-click'\nconst EVENT_SCROLL = 'scroll'\nconst EVENT_ACTIVE = 'active'\nconst DIRECTION_LEFT = 1\nconst DIRECTION_RIGHT = -1\nconst STATE_SHRINK = 0\nconst STATE_GROW = 1\nconst easingTime = 600\nconst momentumLimitTime = 300\nconst momentumLimitDistance = 15\nconst directionLockThreshold = 5\n\nconst transform = prefixStyle('transform')\nconst transitionProperty = prefixStyle('transitionProperty')\nconst transitionDuration = prefixStyle('transitionDuration')\nconst transitionTimingFunction = prefixStyle('transitionTimingFunction')\n\nexport default {\n  name: COMPONENT_NAME,\n  inject: ['swipe'],\n  props: {\n    item: {\n      type: Object,\n      default() {\n        return {}\n      }\n    },\n    btns: {\n      type: Array,\n      default() {\n        return []\n      }\n    },\n    index: {\n      type: Number,\n      index: -1\n    },\n    autoShrink: {\n      type: Boolean,\n      default: false\n    }\n  },\n  watch: {\n    btns() {\n      this.$nextTick(() => {\n        this.refresh()\n      })\n    }\n  },\n  created() {\n    this.x = 0\n    this.state = STATE_SHRINK\n    this.swipe.addItem(this)\n  },\n  mounted() {\n    this.scrollerStyle = this.$refs.swipeItem.style\n    this.$nextTick(() => {\n      this.refresh()\n    })\n    this.$on(EVENT_SCROLL, this._handleBtns)\n  },\n  methods: {\n    _initCachedBtns() {\n      this.cachedBtns = []\n      const len = this.$refs.btns.length\n      for (let i = 0; i < len; i++) {\n        this.cachedBtns.push({\n          width: getRect(this.$refs.btns[i]).width\n        })\n      }\n    },\n    _handleBtns(x) {\n      /* istanbul ignore if */\n      if (this.btns.length === 0) {\n        return\n      }\n      const len = this.$refs.btns.length\n      let delta = 0\n      let totalWidth = -this.maxScrollX\n      for (let i = 0; i < len; i++) {\n        const btn = this.$refs.btns[i]\n        let rate = (totalWidth - delta) / totalWidth\n        let width\n        let translate = rate * x - x\n        if (x < this.maxScrollX) {\n          width = this.cachedBtns[i].width + rate * (this.maxScrollX - x)\n        } else {\n          width = this.cachedBtns[i].width\n        }\n        delta += this.cachedBtns[i].width\n        btn.style.width = `${width}px`\n        btn.style[transform] = `translate(${translate}px)`\n        btn.style[transitionDuration] = '0ms'\n      }\n    },\n    _isInBtns(target) {\n      let parent = target\n      let flag = false\n      while (parent && parent.className.indexOf('cube-swipe-item') < 0) {\n        if (parent.className.indexOf('cube-swipe-btns') >= 0) {\n          flag = true\n          break\n        }\n        parent = parent.parentNode\n      }\n      return flag\n    },\n    _calculateBtnsWidth() {\n      let width = 0\n      const len = this.cachedBtns.length\n      for (let i = 0; i < len; i++) {\n        width += this.cachedBtns[i].width\n      }\n      this.maxScrollX = -width\n    },\n    _translate(x, useZ) {\n      let translateZ = useZ ? ' translateZ(0)' : ''\n      this.scrollerStyle[transform] = `translate(${x}px,0)${translateZ}`\n      this.x = x\n    },\n    _transitionProperty(property = 'transform') {\n      this.scrollerStyle[transitionProperty] = property\n    },\n    _transitionTimingFunction(easing) {\n      this.scrollerStyle[transitionTimingFunction] = easing\n    },\n    _transitionTime(time = 0) {\n      this.scrollerStyle[transitionDuration] = `${time}ms`\n    },\n    _getComputedPositionX() {\n      let matrix = window.getComputedStyle(this.$refs.swipeItem, null)\n      matrix = matrix[transform].split(')')[0].split(', ')\n      let x = +(matrix[12] || matrix[4])\n      return x\n    },\n    _translateBtns(time, easing, extend) {\n      /* istanbul ignore if */\n      if (this.btns.length === 0) {\n        return\n      }\n      const len = this.$refs.btns.length\n      let delta = 0\n      let translate = 0\n      for (let i = 0; i < len; i++) {\n        const btn = this.$refs.btns[i]\n        if (this.state === STATE_GROW) {\n          translate = delta\n        } else {\n          translate = 0\n        }\n        delta += this.cachedBtns[i].width\n        btn.style[transform] = `translate(${translate}px,0) translateZ(0)`\n        btn.style[transitionProperty] = 'all'\n        btn.style[transitionTimingFunction] = easing\n        btn.style[transitionDuration] = `${time}ms`\n        if (extend) {\n          btn.style.width = `${this.cachedBtns[i].width}px`\n        }\n      }\n    },\n    refresh() {\n      if (this.btns.length > 0) {\n        this._initCachedBtns()\n        this._calculateBtnsWidth()\n      }\n      this.endTime = 0\n    },\n    shrink() {\n      this.stop()\n      this.state = STATE_SHRINK\n      this.$nextTick(() => {\n        this.scrollTo(0, easingTime, easeOutQuart)\n        this._translateBtns(easingTime, easeOutQuart)\n      })\n    },\n    grow() {\n      this.state = STATE_GROW\n      const extend = this.x < this.maxScrollX\n      let easing = easeOutCubic\n      this.scrollTo(this.maxScrollX, easingTime, easing)\n      this._translateBtns(easingTime, easing, extend)\n    },\n    scrollTo(x, time, easing) {\n      this._transitionProperty()\n      this._transitionTimingFunction(easing)\n      this._transitionTime(time)\n      this._translate(x, true)\n      if (time) {\n        this.isInTransition = true\n      }\n    },\n    genBtnStyl(btn) {\n      return `background: ${btn.color}`\n    },\n    clickItem() {\n      this.swipe.onItemClick(this.item, this.index)\n      this.$emit(EVENT_ITEM_CLICK, this.item, this.index)\n    },\n    clickBtn(btn) {\n      this.swipe.onBtnClick(btn, this.index)\n      this.$emit(EVENT_BTN_CLICK, btn, this.index)\n      if (this.autoShrink) {\n        this.shrink()\n      }\n    },\n    stop() {\n      if (this.isInTransition) {\n        this.isInTransition = false\n        let x = this.state === STATE_SHRINK ? 0 : this._getComputedPositionX()\n        this._translate(x)\n        this.$emit(EVENT_SCROLL, this.x)\n      }\n    },\n    onTouchStart(e) {\n      this.swipe.onItemActive(this.index)\n      this.$emit(EVENT_ACTIVE, this.index)\n      this.stop()\n      this.moved = false\n      this.movingDirectionX = 0\n      const point = e.touches[0]\n      this.pointX = point.pageX\n      this.pointY = point.pageY\n      this.distX = 0\n      this.distY = 0\n      this.startX = this.x\n      this._transitionTime()\n      this.startTime = getNow()\n      if (this.state === STATE_GROW && !this._isInBtns(e.target)) {\n        this.shrinkTimer = setTimeout(() => {\n          this.shrink()\n        }, 300)\n      }\n    },\n    onTouchMove(e) {\n      if (this.moved) {\n        clearTimeout(this.shrinkTimer)\n        e.stopPropagation()\n      }\n      /* istanbul ignore if */\n      if (this.isInTransition) {\n        return\n      }\n      e.preventDefault()\n      const point = e.touches[0]\n      let deltaX = point.pageX - this.pointX\n      let deltaY = point.pageY - this.pointY\n      this.pointX = point.pageX\n      this.pointY = point.pageY\n\n      this.distX += deltaX\n      this.distY += deltaY\n      let absDistX = Math.abs(this.distX)\n      let absDistY = Math.abs(this.distY)\n\n      if (absDistX + directionLockThreshold <= absDistY) {\n        return\n      }\n\n      let timestamp = getNow()\n      if (timestamp - this.endTime > momentumLimitTime && absDistX < momentumLimitDistance) {\n        return\n      }\n\n      this.movingDirectionX = deltaX > 0 ? DIRECTION_RIGHT : deltaX < 0 ? DIRECTION_LEFT : 0\n\n      let newX = this.x + deltaX\n      if (newX > 0) {\n        newX = 0\n      }\n      if (newX < this.maxScrollX) {\n        newX = this.x + deltaX / 3\n      }\n      if (!this.moved) {\n        this.moved = true\n      }\n\n      this._translate(newX, true)\n\n      if (timestamp - this.startTime > momentumLimitTime) {\n        this.startTime = timestamp\n        this.startX = this.x\n      }\n\n      this.$emit(EVENT_SCROLL, this.x)\n    },\n    onTouchEnd() {\n      if (!this.moved) {\n        return\n      }\n      if (this.movingDirectionX === DIRECTION_RIGHT) {\n        this.shrink()\n        return\n      }\n      this.endTime = getNow()\n      let duration = this.endTime - this.startTime\n      let absDistX = Math.abs(this.x - this.startX)\n      if ((duration < momentumLimitTime && absDistX > momentumLimitDistance) || this.x < this.maxScrollX / 2) {\n        this.grow()\n      } else {\n        this.shrink()\n      }\n    },\n    onTransitionEnd() {\n      this.isInTransition = false\n      this._transitionTime()\n      this._translate(this.x)\n    }\n  },\n  beforeDestroy() {\n    this.swipe.removeItem(this)\n  }\n}\n",{"version":3,"sources":["swipe-item.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"swipe-item.vue","sourceRoot":"node_modules/cube-ui/src/components/swipe","sourcesContent":["<template>\n  <div ref=\"swipeItem\"\n       @transitionend=\"onTransitionEnd\"\n       @touchstart=\"onTouchStart\"\n       @touchmove=\"onTouchMove\"\n       @touchend=\"onTouchEnd\"\n       class=\"cube-swipe-item\">\n    <slot>\n      <div @click=\"clickItem\" class=\"cube-swipe-item-inner border-bottom-1px\">\n        <span>{{item.text}}</span>\n      </div>\n    </slot>\n    <ul class=\"cube-swipe-btns\">\n      <li ref=\"btns\"\n          v-for=\"btn in btns\"\n          class=\"cube-swipe-btn\"\n          :style=\"genBtnStyl(btn)\"\n          @click.prevent=\"clickBtn(btn)\">\n        <span class=\"text\">{{btn.text}}</span>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import {\n    getRect,\n    prefixStyle\n  } from '../../common/helpers/dom'\n\n  import { easeOutQuart, easeOutCubic } from '../../common/helpers/ease'\n  import { getNow } from '../../common/lang/date'\n\n  const COMPONENT_NAME = 'cube-swipe-item'\n  const EVENT_ITEM_CLICK = 'item-click'\n  const EVENT_BTN_CLICK = 'btn-click'\n  const EVENT_SCROLL = 'scroll'\n  const EVENT_ACTIVE = 'active'\n  const DIRECTION_LEFT = 1\n  const DIRECTION_RIGHT = -1\n  const STATE_SHRINK = 0\n  const STATE_GROW = 1\n  const easingTime = 600\n  const momentumLimitTime = 300\n  const momentumLimitDistance = 15\n  const directionLockThreshold = 5\n\n  const transform = prefixStyle('transform')\n  const transitionProperty = prefixStyle('transitionProperty')\n  const transitionDuration = prefixStyle('transitionDuration')\n  const transitionTimingFunction = prefixStyle('transitionTimingFunction')\n\n  export default {\n    name: COMPONENT_NAME,\n    inject: ['swipe'],\n    props: {\n      item: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      btns: {\n        type: Array,\n        default() {\n          return []\n        }\n      },\n      index: {\n        type: Number,\n        index: -1\n      },\n      autoShrink: {\n        type: Boolean,\n        default: false\n      }\n    },\n    watch: {\n      btns() {\n        this.$nextTick(() => {\n          this.refresh()\n        })\n      }\n    },\n    created() {\n      this.x = 0\n      this.state = STATE_SHRINK\n      this.swipe.addItem(this)\n    },\n    mounted() {\n      this.scrollerStyle = this.$refs.swipeItem.style\n      this.$nextTick(() => {\n        this.refresh()\n      })\n      this.$on(EVENT_SCROLL, this._handleBtns)\n    },\n    methods: {\n      _initCachedBtns() {\n        this.cachedBtns = []\n        const len = this.$refs.btns.length\n        for (let i = 0; i < len; i++) {\n          this.cachedBtns.push({\n            width: getRect(this.$refs.btns[i]).width\n          })\n        }\n      },\n      _handleBtns(x) {\n        /* istanbul ignore if */\n        if (this.btns.length === 0) {\n          return\n        }\n        const len = this.$refs.btns.length\n        let delta = 0\n        let totalWidth = -this.maxScrollX\n        for (let i = 0; i < len; i++) {\n          const btn = this.$refs.btns[i]\n          let rate = (totalWidth - delta) / totalWidth\n          let width\n          let translate = rate * x - x\n          if (x < this.maxScrollX) {\n            width = this.cachedBtns[i].width + rate * (this.maxScrollX - x)\n          } else {\n            width = this.cachedBtns[i].width\n          }\n          delta += this.cachedBtns[i].width\n          btn.style.width = `${width}px`\n          btn.style[transform] = `translate(${translate}px)`\n          btn.style[transitionDuration] = '0ms'\n        }\n      },\n      _isInBtns(target) {\n        let parent = target\n        let flag = false\n        while (parent && parent.className.indexOf('cube-swipe-item') < 0) {\n          if (parent.className.indexOf('cube-swipe-btns') >= 0) {\n            flag = true\n            break\n          }\n          parent = parent.parentNode\n        }\n        return flag\n      },\n      _calculateBtnsWidth() {\n        let width = 0\n        const len = this.cachedBtns.length\n        for (let i = 0; i < len; i++) {\n          width += this.cachedBtns[i].width\n        }\n        this.maxScrollX = -width\n      },\n      _translate(x, useZ) {\n        let translateZ = useZ ? ' translateZ(0)' : ''\n        this.scrollerStyle[transform] = `translate(${x}px,0)${translateZ}`\n        this.x = x\n      },\n      _transitionProperty(property = 'transform') {\n        this.scrollerStyle[transitionProperty] = property\n      },\n      _transitionTimingFunction(easing) {\n        this.scrollerStyle[transitionTimingFunction] = easing\n      },\n      _transitionTime(time = 0) {\n        this.scrollerStyle[transitionDuration] = `${time}ms`\n      },\n      _getComputedPositionX() {\n        let matrix = window.getComputedStyle(this.$refs.swipeItem, null)\n        matrix = matrix[transform].split(')')[0].split(', ')\n        let x = +(matrix[12] || matrix[4])\n        return x\n      },\n      _translateBtns(time, easing, extend) {\n        /* istanbul ignore if */\n        if (this.btns.length === 0) {\n          return\n        }\n        const len = this.$refs.btns.length\n        let delta = 0\n        let translate = 0\n        for (let i = 0; i < len; i++) {\n          const btn = this.$refs.btns[i]\n          if (this.state === STATE_GROW) {\n            translate = delta\n          } else {\n            translate = 0\n          }\n          delta += this.cachedBtns[i].width\n          btn.style[transform] = `translate(${translate}px,0) translateZ(0)`\n          btn.style[transitionProperty] = 'all'\n          btn.style[transitionTimingFunction] = easing\n          btn.style[transitionDuration] = `${time}ms`\n          if (extend) {\n            btn.style.width = `${this.cachedBtns[i].width}px`\n          }\n        }\n      },\n      refresh() {\n        if (this.btns.length > 0) {\n          this._initCachedBtns()\n          this._calculateBtnsWidth()\n        }\n        this.endTime = 0\n      },\n      shrink() {\n        this.stop()\n        this.state = STATE_SHRINK\n        this.$nextTick(() => {\n          this.scrollTo(0, easingTime, easeOutQuart)\n          this._translateBtns(easingTime, easeOutQuart)\n        })\n      },\n      grow() {\n        this.state = STATE_GROW\n        const extend = this.x < this.maxScrollX\n        let easing = easeOutCubic\n        this.scrollTo(this.maxScrollX, easingTime, easing)\n        this._translateBtns(easingTime, easing, extend)\n      },\n      scrollTo(x, time, easing) {\n        this._transitionProperty()\n        this._transitionTimingFunction(easing)\n        this._transitionTime(time)\n        this._translate(x, true)\n        if (time) {\n          this.isInTransition = true\n        }\n      },\n      genBtnStyl(btn) {\n        return `background: ${btn.color}`\n      },\n      clickItem() {\n        this.swipe.onItemClick(this.item, this.index)\n        this.$emit(EVENT_ITEM_CLICK, this.item, this.index)\n      },\n      clickBtn(btn) {\n        this.swipe.onBtnClick(btn, this.index)\n        this.$emit(EVENT_BTN_CLICK, btn, this.index)\n        if (this.autoShrink) {\n          this.shrink()\n        }\n      },\n      stop() {\n        if (this.isInTransition) {\n          this.isInTransition = false\n          let x = this.state === STATE_SHRINK ? 0 : this._getComputedPositionX()\n          this._translate(x)\n          this.$emit(EVENT_SCROLL, this.x)\n        }\n      },\n      onTouchStart(e) {\n        this.swipe.onItemActive(this.index)\n        this.$emit(EVENT_ACTIVE, this.index)\n        this.stop()\n        this.moved = false\n        this.movingDirectionX = 0\n        const point = e.touches[0]\n        this.pointX = point.pageX\n        this.pointY = point.pageY\n        this.distX = 0\n        this.distY = 0\n        this.startX = this.x\n        this._transitionTime()\n        this.startTime = getNow()\n        if (this.state === STATE_GROW && !this._isInBtns(e.target)) {\n          this.shrinkTimer = setTimeout(() => {\n            this.shrink()\n          }, 300)\n        }\n      },\n      onTouchMove(e) {\n        if (this.moved) {\n          clearTimeout(this.shrinkTimer)\n          e.stopPropagation()\n        }\n        /* istanbul ignore if */\n        if (this.isInTransition) {\n          return\n        }\n        e.preventDefault()\n        const point = e.touches[0]\n        let deltaX = point.pageX - this.pointX\n        let deltaY = point.pageY - this.pointY\n        this.pointX = point.pageX\n        this.pointY = point.pageY\n\n        this.distX += deltaX\n        this.distY += deltaY\n        let absDistX = Math.abs(this.distX)\n        let absDistY = Math.abs(this.distY)\n\n        if (absDistX + directionLockThreshold <= absDistY) {\n          return\n        }\n\n        let timestamp = getNow()\n        if (timestamp - this.endTime > momentumLimitTime && absDistX < momentumLimitDistance) {\n          return\n        }\n\n        this.movingDirectionX = deltaX > 0 ? DIRECTION_RIGHT : deltaX < 0 ? DIRECTION_LEFT : 0\n\n        let newX = this.x + deltaX\n        if (newX > 0) {\n          newX = 0\n        }\n        if (newX < this.maxScrollX) {\n          newX = this.x + deltaX / 3\n        }\n        if (!this.moved) {\n          this.moved = true\n        }\n\n        this._translate(newX, true)\n\n        if (timestamp - this.startTime > momentumLimitTime) {\n          this.startTime = timestamp\n          this.startX = this.x\n        }\n\n        this.$emit(EVENT_SCROLL, this.x)\n      },\n      onTouchEnd() {\n        if (!this.moved) {\n          return\n        }\n        if (this.movingDirectionX === DIRECTION_RIGHT) {\n          this.shrink()\n          return\n        }\n        this.endTime = getNow()\n        let duration = this.endTime - this.startTime\n        let absDistX = Math.abs(this.x - this.startX)\n        if ((duration < momentumLimitTime && absDistX > momentumLimitDistance) || this.x < this.maxScrollX / 2) {\n          this.grow()\n        } else {\n          this.shrink()\n        }\n      },\n      onTransitionEnd() {\n        this.isInTransition = false\n        this._transitionTime()\n        this._translate(this.x)\n      }\n    },\n    beforeDestroy() {\n      this.swipe.removeItem(this)\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  .cube-swipe-item\n    position: relative\n\n  .cube-swipe-item-inner\n    height: 60px\n    line-height: 60px\n    font-size: $fontsize-large\n    padding-left: 20px\n\n  .cube-swipe-btn\n    display: flex\n    align-items: center\n    position: absolute\n    top: 0\n    left: 100%\n    height: 100%\n    text-align: left\n    font-size: $fontsize-large\n    .text\n      flex: 1\n      padding: 0 20px\n      white-space: nowrap\n      color: $swipe-btn-color\n</style>\n"]}]}