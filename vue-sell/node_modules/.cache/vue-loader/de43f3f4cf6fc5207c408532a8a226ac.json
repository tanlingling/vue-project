{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/scroll-nav-bar/scroll-nav-bar.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/scroll-nav-bar/scroll-nav-bar.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport scrollMixin from '../../common/mixins/scroll'\nimport CubeScroll from '../scroll/scroll.vue'\n\nconst DIRECTION_H = 'horizontal'\nconst DIRECTION_V = 'vertical'\n\nconst COMPONENT_NAME = 'cube-scroll-nav-bar'\nconst EVENT_CHANGE = 'change'\n\nexport default {\n  name: COMPONENT_NAME,\n  inject: {\n    scrollNav: {\n      default: null\n    }\n  },\n  mixins: [scrollMixin],\n  props: {\n    direction: {\n      type: String,\n      default: DIRECTION_H,\n      validator(val) {\n        return val === DIRECTION_H || val === DIRECTION_V\n      }\n    },\n    labels: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return []\n      }\n    },\n    txts: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return this.labels\n      }\n    },\n    current: {\n      type: [String, Number],\n      default: ''\n    }\n  },\n  data() {\n    return {\n      active: this.current\n    }\n  },\n  watch: {\n    current(newVal) {\n      this.active = newVal\n    },\n    active(newVal) {\n      this.$emit(EVENT_CHANGE, newVal)\n      this._adjust()\n    }\n  },\n  mounted() {\n    this.scrollNav && this.scrollNav.setBar(this)\n    if (this.active) {\n      // waiting panels loaded\n      this.$nextTick(() => {\n        this._adjust()\n      })\n    }\n  },\n  beforeDestroy() {\n    this.scrollNav && this.scrollNav.setBar(null)\n  },\n  methods: {\n    clickHandler(label) {\n      if (label === this.active) {\n        return\n      }\n      this.active = label\n      this.scrollNav && this.scrollNav.barChange(label)\n    },\n    refresh() {\n      this.$refs.scroll.refresh()\n      this._adjust()\n    },\n    _adjust() {\n      // waiting ui\n      this.$nextTick(() => {\n        const isHorizontal = this.direction === DIRECTION_H\n        const targetProp = isHorizontal ? 'clientWidth' : 'clientHeight'\n        const active = this.active\n        const viewportSize = this.$refs.scroll.$el[targetProp]\n        const itemsEle = this.$refs.items\n        const scrollerSize = itemsEle[targetProp]\n        const minTranslate = Math.min(0, viewportSize - scrollerSize)\n        const middleTranslate = viewportSize / 2\n        const items = itemsEle.children\n        let size = 0\n        this.labels.every((label, index) => {\n          if (label === active) {\n            size += (items[index][targetProp] / 2)\n            return false\n          }\n          size += items[index][targetProp]\n          return true\n        })\n        let translate = middleTranslate - size\n        translate = Math.max(minTranslate, Math.min(0, translate))\n        this.$refs.scroll.scrollTo(isHorizontal ? translate : 0, isHorizontal ? 0 : translate, 300)\n      })\n    }\n  },\n  components: {\n    CubeScroll\n  }\n}\n",{"version":3,"sources":["scroll-nav-bar.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"scroll-nav-bar.vue","sourceRoot":"node_modules/cube-ui/src/components/scroll-nav-bar","sourcesContent":["<template>\n  <div class=\"cube-scroll-nav-bar\" :class=\"'cube-scroll-nav-bar_' + direction\">\n    <cube-scroll\n      ref=\"scroll\"\n      nestMode=\"none\"\n      :options=\"options\"\n      :direction=\"direction\">\n      <div class=\"cube-scroll-nav-bar-items\" ref=\"items\">\n        <div\n          class=\"cube-scroll-nav-bar-item\"\n          v-for=\"(txt, index) in txts\"\n          :key=\"index\"\n          :class=\"{'cube-scroll-nav-bar-item_active': active === labels[index]}\"\n          @click=\"clickHandler(labels[index])\">\n          <slot\n            :txt=\"txt\"\n            :index=\"index\"\n            :active=\"active\"\n            :label=\"labels[index]\">\n              <span v-html=\"txt\"></span>\n            </slot>\n        </div>\n      </div>\n    </cube-scroll>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import scrollMixin from '../../common/mixins/scroll'\n  import CubeScroll from '../scroll/scroll.vue'\n\n  const DIRECTION_H = 'horizontal'\n  const DIRECTION_V = 'vertical'\n\n  const COMPONENT_NAME = 'cube-scroll-nav-bar'\n  const EVENT_CHANGE = 'change'\n\n  export default {\n    name: COMPONENT_NAME,\n    inject: {\n      scrollNav: {\n        default: null\n      }\n    },\n    mixins: [scrollMixin],\n    props: {\n      direction: {\n        type: String,\n        default: DIRECTION_H,\n        validator(val) {\n          return val === DIRECTION_H || val === DIRECTION_V\n        }\n      },\n      labels: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      txts: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return this.labels\n        }\n      },\n      current: {\n        type: [String, Number],\n        default: ''\n      }\n    },\n    data() {\n      return {\n        active: this.current\n      }\n    },\n    watch: {\n      current(newVal) {\n        this.active = newVal\n      },\n      active(newVal) {\n        this.$emit(EVENT_CHANGE, newVal)\n        this._adjust()\n      }\n    },\n    mounted() {\n      this.scrollNav && this.scrollNav.setBar(this)\n      if (this.active) {\n        // waiting panels loaded\n        this.$nextTick(() => {\n          this._adjust()\n        })\n      }\n    },\n    beforeDestroy() {\n      this.scrollNav && this.scrollNav.setBar(null)\n    },\n    methods: {\n      clickHandler(label) {\n        if (label === this.active) {\n          return\n        }\n        this.active = label\n        this.scrollNav && this.scrollNav.barChange(label)\n      },\n      refresh() {\n        this.$refs.scroll.refresh()\n        this._adjust()\n      },\n      _adjust() {\n        // waiting ui\n        this.$nextTick(() => {\n          const isHorizontal = this.direction === DIRECTION_H\n          const targetProp = isHorizontal ? 'clientWidth' : 'clientHeight'\n          const active = this.active\n          const viewportSize = this.$refs.scroll.$el[targetProp]\n          const itemsEle = this.$refs.items\n          const scrollerSize = itemsEle[targetProp]\n          const minTranslate = Math.min(0, viewportSize - scrollerSize)\n          const middleTranslate = viewportSize / 2\n          const items = itemsEle.children\n          let size = 0\n          this.labels.every((label, index) => {\n            if (label === active) {\n              size += (items[index][targetProp] / 2)\n              return false\n            }\n            size += items[index][targetProp]\n            return true\n          })\n          let translate = middleTranslate - size\n          translate = Math.max(minTranslate, Math.min(0, translate))\n          this.$refs.scroll.scrollTo(isHorizontal ? translate : 0, isHorizontal ? 0 : translate, 300)\n        })\n      }\n    },\n    components: {\n      CubeScroll\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-scroll-nav-bar\n    position: relative\n    display: flex\n    color: $scroll-nav-color\n    background-color: $scroll-nav-bgc\n  .cube-scroll-nav-bar_horizontal\n    align-items: center\n    .cube-scroll-wrapper\n      flex: 1\n      text-align: center\n    .cube-scroll-content\n      display: inline-block\n    .cube-scroll-nav-bar-items\n      white-space: nowrap\n  .cube-scroll-nav-bar_vertical\n    height: 100%\n    justify-content: center\n    text-align: center\n    .cube-scroll-nav-bar-item\n      display: block\n  .cube-scroll-nav-bar-items\n    font-size: $fontsize-medium\n  .cube-scroll-nav-bar-item\n    display: inline-block\n    padding: 20px 15px\n  .cube-scroll-nav-bar-item_active\n    color: $scroll-nav-active-color\n</style>\n"]}]}