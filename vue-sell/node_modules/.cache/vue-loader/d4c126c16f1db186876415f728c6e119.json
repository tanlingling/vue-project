{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/slide/slide.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/slide/slide.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CubeSlideItem from './slide-item.vue'\nimport BScroll from 'better-scroll'\nimport scrollMixin from '../../common/mixins/scroll'\nimport deprecatedMixin from '../../common/mixins/deprecated'\n\nconst COMPONENT_NAME = 'cube-slide'\nconst EVENT_CHANGE = 'change'\nconst EVENT_SELECT = 'click'\nconst EVENT_SCROLL_END = 'scroll-end'\nconst EVENT_SCROLL = 'scroll'\n\nconst DIRECTION_H = 'horizontal'\nconst DIRECTION_V = 'vertical'\n\nconst DEFAULT_OPTIONS = {\n  momentum: false,\n  click: true,\n  observeDOM: false,\n  bounce: false\n}\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [scrollMixin, deprecatedMixin],\n  props: {\n    data: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return []\n      }\n    },\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    threshold: {\n      type: Number,\n      default: 0.3\n    },\n    speed: {\n      type: Number,\n      default: 400\n    },\n    autoPlay: {\n      type: Boolean,\n      default: true\n    },\n    interval: {\n      type: Number,\n      default: 4000\n    },\n    showDots: {\n      type: Boolean,\n      default: true\n    },\n    direction: {\n      type: String,\n      default: DIRECTION_H\n    },\n    // The props allowVertical, stopPropagation could be removed in next minor version.\n    allowVertical: {\n      type: Boolean,\n      default: undefined,\n      deprecated: {\n        replacedBy: 'options'\n      }\n    },\n    stopPropagation: {\n      type: Boolean,\n      default: undefined,\n      deprecated: {\n        replacedBy: 'options'\n      }\n    },\n    refreshResetCurrent: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      dots: 0,\n      currentPageIndex: this.initialIndex || 0\n    }\n  },\n  created() {\n    this._dataWatchers = []\n    const needRefreshProps = ['data', 'loop', 'autoPlay', 'options.eventPassthrough', 'threshold', 'speed', 'allowVertical']\n    needRefreshProps.forEach((key) => {\n      this._dataWatchers.push(this.$watch(key, () => {\n        // To fix the render bug when add items since loop.\n        if (key === 'data') {\n          this._destroy()\n        }\n\n        /* istanbul ignore next */\n        this.$nextTick(() => {\n          this.refresh()\n        })\n      }))\n    })\n  },\n  watch: {\n    initialIndex(newIndex) {\n      if (newIndex !== this.currentPageIndex) {\n        this.slide && this.slide.goToPage(newIndex)\n      }\n    }\n  },\n  methods: {\n    clickItem(item, index) {\n      /* istanbul ignore next */\n      this.$emit(EVENT_SELECT, item, index)\n    },\n    refresh() {\n      /* istanbul ignore if */\n      if (this.slide === null) {\n        return\n      }\n      this._destroy()\n      clearTimeout(this._timer)\n\n      if (this.slide && this.refreshResetCurrent) {\n        this.currentPageIndex = 0\n      }\n      this._updateSlideDom()\n      if (this.showDots) {\n        this._initDots()\n      }\n      if (this.currentPageIndex >= this.dots.length) {\n        this.currentPageIndex = this.dots.length - 1\n      }\n      this._initSlide()\n\n      if (this.autoPlay) {\n        this._play()\n      }\n    },\n    _destroy() {\n      this.slide && this.slide.destroy()\n    },\n    _refresh() {\n      this._updateSlideDom(true)\n      this.slide.refresh()\n    },\n    _updateSlideDom(isResize) {\n      this._setSlideStyle(isResize)\n    },\n    _setSlideStyle(isResize) {\n      this.children = this.$refs.slideGroup.children\n\n      const target = this.direction === DIRECTION_H ? 'width' : 'height'\n      let allSize = 0\n      const slideSize = this.$refs.slide[`client${target[0].toUpperCase() + target.slice(1)}`]\n      const len = this.children.length\n      for (let i = 0; i < len; i++) {\n        const child = this.children[i]\n        child.style[target] = slideSize + 'px'\n        allSize += slideSize\n      }\n      if (this.loop && !isResize && len > 1) {\n        allSize += 2 * slideSize\n      }\n      this.$refs.slideGroup.style[target] = allSize + 'px'\n    },\n    _initSlide() {\n      const eventPassthrough = this.direction === DIRECTION_H && this.allowVertical ? DIRECTION_V : ''\n\n      const options = Object.assign({}, DEFAULT_OPTIONS, {\n        scrollX: this.direction === DIRECTION_H,\n        scrollY: this.direction === DIRECTION_V,\n        eventPassthrough,\n        snap: {\n          loop: this.loop,\n          threshold: this.threshold,\n          speed: this.speed\n        },\n        stopPropagation: this.stopPropagation\n      }, this.options)\n\n      this.slide = new BScroll(this.$refs.slide, options)\n\n      this.slide.on('scrollEnd', this._onScrollEnd)\n\n      this.slide.goToPage(this.currentPageIndex, 0, 0)\n\n      /* dispatch scroll position constantly */\n      if (this.options.listenScroll && this.options.probeType === 3) {\n        this.slide.on('scroll', this._onScroll)\n      }\n      const slideEl = this.$refs.slide\n      slideEl.removeEventListener('touchend', this._touchEndEvent, false)\n      this._touchEndEvent = () => {\n        if (this.autoPlay) {\n          this._play()\n        }\n      }\n      slideEl.addEventListener('touchend', this._touchEndEvent, false)\n\n      this.slide.on('beforeScrollStart', () => {\n        if (this.autoPlay) {\n          clearTimeout(this._timer)\n        }\n      })\n    },\n    _onScrollEnd() {\n      const { pageX, pageY } = this.slide.getCurrentPage()\n      let pageIndex = this.direction === DIRECTION_H ? pageX : pageY\n      if (this.currentPageIndex !== pageIndex) {\n        this.currentPageIndex = pageIndex\n        this.$emit(EVENT_CHANGE, pageIndex)\n      }\n\n      this.$emit(EVENT_SCROLL_END, pageIndex)\n\n      if (this.autoPlay) {\n        this._play()\n      }\n    },\n    _onScroll(pos) {\n      this.$emit(EVENT_SCROLL, pos)\n    },\n    _initDots() {\n      this.dots = new Array(this.children.length)\n    },\n    _play() {\n      clearTimeout(this._timer)\n      this._timer = setTimeout(() => {\n        this.slide.next()\n      }, this.interval)\n    },\n    _deactivated() {\n      clearTimeout(this._timer)\n      clearTimeout(this._resizeTimer)\n      window.removeEventListener('resize', this._resizeHandler)\n      const slideEl = this.$refs.slide\n      if (slideEl) {\n        slideEl.removeEventListener('touchend', this._touchEndEvent, false)\n      }\n    },\n    _resizeHandler() {\n      /* istanbul ignore if */\n      if (!this.slide) {\n        return\n      }\n      clearTimeout(this._resizeTimer)\n      this._resizeTimer = setTimeout(() => {\n        /* istanbul ignore if */\n        if (this.slide.isInTransition) {\n          this._onScrollEnd()\n        } else {\n          if (this.autoPlay) {\n            this._play()\n          }\n        }\n        this._refresh()\n      }, 60)\n    }\n  },\n  mounted() {\n    this.$nextTick(() => {\n      this.refresh()\n    })\n\n    window.addEventListener('resize', this._resizeHandler)\n  },\n  activated() {\n    /* istanbul ignore next */\n    if (this.autoPlay) {\n      this._play()\n    }\n    window.addEventListener('resize', this._resizeHandler)\n  },\n  deactivated() {\n    /* istanbul ignore next */\n    this._deactivated()\n  },\n  destroyed() {\n    this._deactivated()\n    this._destroy()\n    this.slide = null\n\n    this._dataWatchers.forEach((cancalWatcher) => {\n      cancalWatcher()\n    })\n    this._dataWatchers = null\n  },\n  components: {\n    CubeSlideItem\n  }\n}\n",{"version":3,"sources":["slide.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"slide.vue","sourceRoot":"node_modules/cube-ui/src/components/slide","sourcesContent":["<template>\n  <div class=\"cube-slide\" ref=\"slide\">\n    <div class=\"cube-slide-group\" ref=\"slideGroup\">\n      <slot>\n        <cube-slide-item\n          v-for=\"(item, index) in data\"\n          :key=\"index\"\n          @click.native=\"clickItem(item, index)\"\n          :item=\"item\">\n        </cube-slide-item>\n      </slot>\n    </div>\n    <div class=\"cube-slide-dots\" v-if=\"showDots\">\n      <slot name=\"dots\" :current=\"currentPageIndex\" :dots=\"dots\">\n        <span :class=\"{active: currentPageIndex === index}\" v-for=\"(item, index) in dots\" :key=\"index\"></span>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import CubeSlideItem from './slide-item.vue'\n  import BScroll from 'better-scroll'\n  import scrollMixin from '../../common/mixins/scroll'\n  import deprecatedMixin from '../../common/mixins/deprecated'\n\n  const COMPONENT_NAME = 'cube-slide'\n  const EVENT_CHANGE = 'change'\n  const EVENT_SELECT = 'click'\n  const EVENT_SCROLL_END = 'scroll-end'\n  const EVENT_SCROLL = 'scroll'\n\n  const DIRECTION_H = 'horizontal'\n  const DIRECTION_V = 'vertical'\n\n  const DEFAULT_OPTIONS = {\n    momentum: false,\n    click: true,\n    observeDOM: false,\n    bounce: false\n  }\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [scrollMixin, deprecatedMixin],\n    props: {\n      data: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      initialIndex: {\n        type: Number,\n        default: 0\n      },\n      loop: {\n        type: Boolean,\n        default: true\n      },\n      threshold: {\n        type: Number,\n        default: 0.3\n      },\n      speed: {\n        type: Number,\n        default: 400\n      },\n      autoPlay: {\n        type: Boolean,\n        default: true\n      },\n      interval: {\n        type: Number,\n        default: 4000\n      },\n      showDots: {\n        type: Boolean,\n        default: true\n      },\n      direction: {\n        type: String,\n        default: DIRECTION_H\n      },\n      // The props allowVertical, stopPropagation could be removed in next minor version.\n      allowVertical: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'options'\n        }\n      },\n      stopPropagation: {\n        type: Boolean,\n        default: undefined,\n        deprecated: {\n          replacedBy: 'options'\n        }\n      },\n      refreshResetCurrent: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data() {\n      return {\n        dots: 0,\n        currentPageIndex: this.initialIndex || 0\n      }\n    },\n    created() {\n      this._dataWatchers = []\n      const needRefreshProps = ['data', 'loop', 'autoPlay', 'options.eventPassthrough', 'threshold', 'speed', 'allowVertical']\n      needRefreshProps.forEach((key) => {\n        this._dataWatchers.push(this.$watch(key, () => {\n          // To fix the render bug when add items since loop.\n          if (key === 'data') {\n            this._destroy()\n          }\n\n          /* istanbul ignore next */\n          this.$nextTick(() => {\n            this.refresh()\n          })\n        }))\n      })\n    },\n    watch: {\n      initialIndex(newIndex) {\n        if (newIndex !== this.currentPageIndex) {\n          this.slide && this.slide.goToPage(newIndex)\n        }\n      }\n    },\n    methods: {\n      clickItem(item, index) {\n        /* istanbul ignore next */\n        this.$emit(EVENT_SELECT, item, index)\n      },\n      refresh() {\n        /* istanbul ignore if */\n        if (this.slide === null) {\n          return\n        }\n        this._destroy()\n        clearTimeout(this._timer)\n\n        if (this.slide && this.refreshResetCurrent) {\n          this.currentPageIndex = 0\n        }\n        this._updateSlideDom()\n        if (this.showDots) {\n          this._initDots()\n        }\n        if (this.currentPageIndex >= this.dots.length) {\n          this.currentPageIndex = this.dots.length - 1\n        }\n        this._initSlide()\n\n        if (this.autoPlay) {\n          this._play()\n        }\n      },\n      _destroy() {\n        this.slide && this.slide.destroy()\n      },\n      _refresh() {\n        this._updateSlideDom(true)\n        this.slide.refresh()\n      },\n      _updateSlideDom(isResize) {\n        this._setSlideStyle(isResize)\n      },\n      _setSlideStyle(isResize) {\n        this.children = this.$refs.slideGroup.children\n\n        const target = this.direction === DIRECTION_H ? 'width' : 'height'\n        let allSize = 0\n        const slideSize = this.$refs.slide[`client${target[0].toUpperCase() + target.slice(1)}`]\n        const len = this.children.length\n        for (let i = 0; i < len; i++) {\n          const child = this.children[i]\n          child.style[target] = slideSize + 'px'\n          allSize += slideSize\n        }\n        if (this.loop && !isResize && len > 1) {\n          allSize += 2 * slideSize\n        }\n        this.$refs.slideGroup.style[target] = allSize + 'px'\n      },\n      _initSlide() {\n        const eventPassthrough = this.direction === DIRECTION_H && this.allowVertical ? DIRECTION_V : ''\n\n        const options = Object.assign({}, DEFAULT_OPTIONS, {\n          scrollX: this.direction === DIRECTION_H,\n          scrollY: this.direction === DIRECTION_V,\n          eventPassthrough,\n          snap: {\n            loop: this.loop,\n            threshold: this.threshold,\n            speed: this.speed\n          },\n          stopPropagation: this.stopPropagation\n        }, this.options)\n\n        this.slide = new BScroll(this.$refs.slide, options)\n\n        this.slide.on('scrollEnd', this._onScrollEnd)\n\n        this.slide.goToPage(this.currentPageIndex, 0, 0)\n\n        /* dispatch scroll position constantly */\n        if (this.options.listenScroll && this.options.probeType === 3) {\n          this.slide.on('scroll', this._onScroll)\n        }\n        const slideEl = this.$refs.slide\n        slideEl.removeEventListener('touchend', this._touchEndEvent, false)\n        this._touchEndEvent = () => {\n          if (this.autoPlay) {\n            this._play()\n          }\n        }\n        slideEl.addEventListener('touchend', this._touchEndEvent, false)\n\n        this.slide.on('beforeScrollStart', () => {\n          if (this.autoPlay) {\n            clearTimeout(this._timer)\n          }\n        })\n      },\n      _onScrollEnd() {\n        const { pageX, pageY } = this.slide.getCurrentPage()\n        let pageIndex = this.direction === DIRECTION_H ? pageX : pageY\n        if (this.currentPageIndex !== pageIndex) {\n          this.currentPageIndex = pageIndex\n          this.$emit(EVENT_CHANGE, pageIndex)\n        }\n\n        this.$emit(EVENT_SCROLL_END, pageIndex)\n\n        if (this.autoPlay) {\n          this._play()\n        }\n      },\n      _onScroll(pos) {\n        this.$emit(EVENT_SCROLL, pos)\n      },\n      _initDots() {\n        this.dots = new Array(this.children.length)\n      },\n      _play() {\n        clearTimeout(this._timer)\n        this._timer = setTimeout(() => {\n          this.slide.next()\n        }, this.interval)\n      },\n      _deactivated() {\n        clearTimeout(this._timer)\n        clearTimeout(this._resizeTimer)\n        window.removeEventListener('resize', this._resizeHandler)\n        const slideEl = this.$refs.slide\n        if (slideEl) {\n          slideEl.removeEventListener('touchend', this._touchEndEvent, false)\n        }\n      },\n      _resizeHandler() {\n        /* istanbul ignore if */\n        if (!this.slide) {\n          return\n        }\n        clearTimeout(this._resizeTimer)\n        this._resizeTimer = setTimeout(() => {\n          /* istanbul ignore if */\n          if (this.slide.isInTransition) {\n            this._onScrollEnd()\n          } else {\n            if (this.autoPlay) {\n              this._play()\n            }\n          }\n          this._refresh()\n        }, 60)\n      }\n    },\n    mounted() {\n      this.$nextTick(() => {\n        this.refresh()\n      })\n\n      window.addEventListener('resize', this._resizeHandler)\n    },\n    activated() {\n      /* istanbul ignore next */\n      if (this.autoPlay) {\n        this._play()\n      }\n      window.addEventListener('resize', this._resizeHandler)\n    },\n    deactivated() {\n      /* istanbul ignore next */\n      this._deactivated()\n    },\n    destroyed() {\n      this._deactivated()\n      this._destroy()\n      this.slide = null\n\n      this._dataWatchers.forEach((cancalWatcher) => {\n        cancalWatcher()\n      })\n      this._dataWatchers = null\n    },\n    components: {\n      CubeSlideItem\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  .cube-slide\n    position: relative\n    min-height: 1px\n    height: 100%\n    overflow: hidden\n\n  .cube-slide-group\n    position: relative\n    height: 100%\n    overflow: hidden\n    white-space: nowrap\n\n  .cube-slide-dots\n    position: absolute\n    bottom: 2px\n    right: 0\n    left: 0\n    padding: 0 6px\n    font-size: 0\n    text-align: center\n    transform: translateZ(1px)\n    > span\n      display: inline-block\n      vertical-align: bottom\n      margin: 0 1px\n      width: 10px\n      height: 1px\n      background: $slide-dot-bgc\n      &.active\n        background: $slide-dot-active-bgc\n</style>\n"]}]}