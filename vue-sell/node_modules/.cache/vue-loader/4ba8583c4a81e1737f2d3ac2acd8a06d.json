{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/image-preview/image-preview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/image-preview/image-preview.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport CubePopup from '../popup/popup.vue'\nimport CubeSlide from '../slide/slide.vue'\nimport CubeSlideItem from '../slide/slide-item.vue'\nimport CubeScroll from '../scroll/scroll.vue'\nimport visibilityMixin from '../../common/mixins/visibility'\nimport popupMixin from '../../common/mixins/popup'\nimport { isAndroid } from '../../common/helpers/env'\n\nconst COMPONENT_NAME = 'cube-image-preview'\nconst EVENT_CHANGE = 'change'\nconst EVENT_HIDE = 'hide'\n\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin],\n  props: {\n    initialIndex: {\n      type: Number,\n      default: 0\n    },\n    imgs: {\n      type: Array,\n      default() {\n        /* istanbul ignore next */\n        return []\n      }\n    },\n    loop: {\n      type: Boolean,\n      default: true\n    },\n    speed: {\n      type: Number,\n      default: 400\n    },\n    preventDefault: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data() {\n    return {\n      currentPageIndex: this.initialIndex,\n      options: {\n        observeDOM: false,\n        bounce: {\n          left: true,\n          right: true\n        },\n        useTransition: !isAndroid,\n        probeType: 3,\n        preventDefault: this.preventDefault\n      },\n      scrollOptions: {\n        HWCompositing: isAndroid,\n        observeDOM: false,\n        zoom: true,\n        bindToWrapper: true,\n        freeScroll: true,\n        scrollX: true,\n        scrollY: true,\n        probeType: 3,\n        bounce: false,\n        click: false,\n        dblclick: true,\n        bounceTime: 300,\n        preventDefault: this.preventDefault\n      }\n    }\n  },\n  watch: {\n    initialIndex(newIndex) {\n      this.setPageIndex(newIndex)\n    }\n  },\n  methods: {\n    show() {\n      this.isVisible = true\n      this.$nextTick(() => {\n        this._listenSlide()\n        this._listenScroll()\n      })\n    },\n    _listenSlide() {\n      // waiting slide initial\n      this.$nextTick(() => {\n        const slide = this.$refs.slide.slide\n        slide.on('scrollStart', this.slideScrollStartHandler)\n        slide.on('scrollEnd', this.slideScrollEndHandler)\n      })\n    },\n    _listenScroll() {\n      // waiting scroll initial\n      this.$nextTick(() => {\n        this.$refs.items.forEach((scrollItem) => {\n          const scroll = scrollItem.scroll\n          scroll.on('zoomStart', this.zoomStartHandler.bind(this, scroll))\n          scroll.on('beforeScrollStart', this.beforeScrollHandler)\n          scroll.on('scroll', this.checkBoundary.bind(this, scroll))\n          scroll.on('scrollEnd', this.scrollEndHandler.bind(this, scroll))\n        })\n      })\n    },\n    hide() {\n      this.isVisible = false\n      this.$emit(EVENT_HIDE)\n    },\n    prev() {\n      const slide = this.$refs.slide.slide\n      slide && slide.prev()\n    },\n    next() {\n      const slide = this.$refs.slide.slide\n      slide && slide.next()\n    },\n    goTo(index) {\n      const slide = this.$refs.slide.slide\n      slide && slide.goToPage(index, 0)\n    },\n    imgLoad(i) {\n      /* istanbul ignore if */\n      if (this.isVisible && this.$refs.items) {\n        this.$refs.items[i].scroll.refresh()\n      }\n    },\n    setPageIndex(currentPageIndex) {\n      if (this.currentPageIndex >= 0 && this.currentPageIndex !== currentPageIndex) {\n        const item = this.$refs.items[this.currentPageIndex]\n        if (item) {\n          const scroll = item.scroll\n          /* istanbul ignore if */\n          if (scroll.scale !== 1) {\n            scroll.scale = 1\n            scroll.lastcale = 1\n            scroll.refresh()\n          }\n        }\n      }\n      this.currentPageIndex = currentPageIndex\n    },\n    slideChangeHandler(currentPageIndex) {\n      this.setPageIndex(currentPageIndex)\n      this.slideScrollEndHandler()\n      this.$emit(EVENT_CHANGE, currentPageIndex)\n    },\n    slideScrollStartHandler() {\n      const slide = this.$refs.slide.slide\n      if (this._scrolling && !this._hasEnableSlide) {\n        slide.disable()\n      } else {\n        slide.enable()\n      }\n    },\n    slideScrollEndHandler() {\n      this.$refs.items.forEach((scrollItem) => {\n        this.scrollEndHandler(scrollItem.scroll)\n      })\n    },\n    _scroll(scroll) {\n      const slide = this.$refs.slide.slide\n      slide.disable()\n      slide.refresh()\n      scroll.enable()\n    },\n    _slide(scroll) {\n      this.$refs.slide.slide.enable()\n      scroll.disable()\n    },\n    beforeScrollHandler() {\n      // for touchstart scrollEnd\n      // cancel it, do not enable slide\n      clearTimeout(this.enableSlideTid)\n    },\n    scrollEndHandler(scroll) {\n      clearTimeout(this.enableSlideTid)\n      if (this.dblZooming) {\n        this.dblZooming = false\n        clearTimeout(this.clickTid)\n      }\n      this._hasEnableSlide = false\n      this._scrolling = false\n      scroll.enable()\n      this.enableSlideTid = setTimeout(() => {\n        this.$refs.slide.slide.enable()\n      })\n    },\n    checkBoundary(scroll, pos) {\n      if (scroll.distX && Math.abs(scroll.distX) > Math.abs(scroll.distY)) {\n        this._scrolling = true\n        const reached = scroll.distX > 0 ? pos.x >= scroll.minScrollX : pos.x <= scroll.maxScrollX\n        if (reached) {\n          this._hasEnableSlide = true\n          this._slide(scroll)\n        } else {\n          if (!this._hasEnableSlide) {\n            this._scroll(scroll)\n          }\n        }\n      } else if (scroll.distY) {\n        this._scrolling = true\n        this._scroll(scroll)\n      }\n    },\n    zoomStartHandler(scroll) {\n      this._scroll(scroll)\n    },\n    dblclickHandler(index, e) {\n      const scroll = this.$refs.items[index].scroll\n      this.dblZooming = true\n      this.zoomTo(scroll, scroll.scale > 1 ? 1 : 2, e)\n      scroll.disable()\n    },\n    itemClickHandler() {\n      clearTimeout(this.clickTid)\n      this.clickTid = setTimeout(() => {\n        !this.dblZooming && this.hide()\n      }, this.scrollOptions.bounceTime)\n    },\n    zoomTo(scroll, scale, e) {\n      scroll.zoomTo(scale, e.pageX, e.pageY)\n    }\n  },\n  components: {\n    CubePopup,\n    CubeSlide,\n    CubeSlideItem,\n    CubeScroll\n  }\n}\n",{"version":3,"sources":["image-preview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4CA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"image-preview.vue","sourceRoot":"node_modules/cube-ui/src/components/image-preview","sourcesContent":["<template>\n  <transition name=\"cube-image-preview-fade\">\n    <cube-popup type=\"image-preview\" :z-index=\"zIndex\" :center=\"false\" v-show=\"isVisible\">\n      <div class=\"cube-image-preview-container\">\n        <div class=\"cube-image-preview-header\">\n          <slot name=\"header\" :current=\"currentPageIndex\"></slot>\n        </div>\n        <cube-slide\n          ref=\"slide\"\n          v-if=\"isVisible\"\n          :data=\"imgs\"\n          :initial-index=\"currentPageIndex\"\n          :auto-play=\"false\"\n          :loop=\"loop\"\n          :speed=\"speed\"\n          :options=\"options\"\n          @change=\"slideChangeHandler\"\n        >\n          <cube-slide-item\n            v-for=\"(img, index) in imgs\"\n            :key=\"index\"\n          >\n            <div class=\"cube-image-preview-item\" @click=\"itemClickHandler\">\n              <cube-scroll\n                ref=\"items\"\n                :options=\"scrollOptions\"\n                @dblclick.native=\"dblclickHandler(index, $event)\"\n              >\n                <img class=\"cube-image-preview-img\" :src=\"img\" @load=\"imgLoad(index)\">\n              </cube-scroll>\n            </div>\n          </cube-slide-item>\n          <template slot=\"dots\"><i></i></template>\n        </cube-slide>\n        <div class=\"cube-image-preview-footer\">\n          <slot name=\"footer\" :current=\"currentPageIndex\">\n            <span class=\"cube-image-preview-counter\">{{currentPageIndex + 1}}/{{imgs.length}}</span>\n          </slot>\n        </div>\n      </div>\n    </cube-popup>\n  </transition>\n</template>\n<script type=\"text/ecmascript-6\">\n  import CubePopup from '../popup/popup.vue'\n  import CubeSlide from '../slide/slide.vue'\n  import CubeSlideItem from '../slide/slide-item.vue'\n  import CubeScroll from '../scroll/scroll.vue'\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n  import { isAndroid } from '../../common/helpers/env'\n\n  const COMPONENT_NAME = 'cube-image-preview'\n  const EVENT_CHANGE = 'change'\n  const EVENT_HIDE = 'hide'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin],\n    props: {\n      initialIndex: {\n        type: Number,\n        default: 0\n      },\n      imgs: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      loop: {\n        type: Boolean,\n        default: true\n      },\n      speed: {\n        type: Number,\n        default: 400\n      },\n      preventDefault: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data() {\n      return {\n        currentPageIndex: this.initialIndex,\n        options: {\n          observeDOM: false,\n          bounce: {\n            left: true,\n            right: true\n          },\n          useTransition: !isAndroid,\n          probeType: 3,\n          preventDefault: this.preventDefault\n        },\n        scrollOptions: {\n          HWCompositing: isAndroid,\n          observeDOM: false,\n          zoom: true,\n          bindToWrapper: true,\n          freeScroll: true,\n          scrollX: true,\n          scrollY: true,\n          probeType: 3,\n          bounce: false,\n          click: false,\n          dblclick: true,\n          bounceTime: 300,\n          preventDefault: this.preventDefault\n        }\n      }\n    },\n    watch: {\n      initialIndex(newIndex) {\n        this.setPageIndex(newIndex)\n      }\n    },\n    methods: {\n      show() {\n        this.isVisible = true\n        this.$nextTick(() => {\n          this._listenSlide()\n          this._listenScroll()\n        })\n      },\n      _listenSlide() {\n        // waiting slide initial\n        this.$nextTick(() => {\n          const slide = this.$refs.slide.slide\n          slide.on('scrollStart', this.slideScrollStartHandler)\n          slide.on('scrollEnd', this.slideScrollEndHandler)\n        })\n      },\n      _listenScroll() {\n        // waiting scroll initial\n        this.$nextTick(() => {\n          this.$refs.items.forEach((scrollItem) => {\n            const scroll = scrollItem.scroll\n            scroll.on('zoomStart', this.zoomStartHandler.bind(this, scroll))\n            scroll.on('beforeScrollStart', this.beforeScrollHandler)\n            scroll.on('scroll', this.checkBoundary.bind(this, scroll))\n            scroll.on('scrollEnd', this.scrollEndHandler.bind(this, scroll))\n          })\n        })\n      },\n      hide() {\n        this.isVisible = false\n        this.$emit(EVENT_HIDE)\n      },\n      prev() {\n        const slide = this.$refs.slide.slide\n        slide && slide.prev()\n      },\n      next() {\n        const slide = this.$refs.slide.slide\n        slide && slide.next()\n      },\n      goTo(index) {\n        const slide = this.$refs.slide.slide\n        slide && slide.goToPage(index, 0)\n      },\n      imgLoad(i) {\n        /* istanbul ignore if */\n        if (this.isVisible && this.$refs.items) {\n          this.$refs.items[i].scroll.refresh()\n        }\n      },\n      setPageIndex(currentPageIndex) {\n        if (this.currentPageIndex >= 0 && this.currentPageIndex !== currentPageIndex) {\n          const item = this.$refs.items[this.currentPageIndex]\n          if (item) {\n            const scroll = item.scroll\n            /* istanbul ignore if */\n            if (scroll.scale !== 1) {\n              scroll.scale = 1\n              scroll.lastcale = 1\n              scroll.refresh()\n            }\n          }\n        }\n        this.currentPageIndex = currentPageIndex\n      },\n      slideChangeHandler(currentPageIndex) {\n        this.setPageIndex(currentPageIndex)\n        this.slideScrollEndHandler()\n        this.$emit(EVENT_CHANGE, currentPageIndex)\n      },\n      slideScrollStartHandler() {\n        const slide = this.$refs.slide.slide\n        if (this._scrolling && !this._hasEnableSlide) {\n          slide.disable()\n        } else {\n          slide.enable()\n        }\n      },\n      slideScrollEndHandler() {\n        this.$refs.items.forEach((scrollItem) => {\n          this.scrollEndHandler(scrollItem.scroll)\n        })\n      },\n      _scroll(scroll) {\n        const slide = this.$refs.slide.slide\n        slide.disable()\n        slide.refresh()\n        scroll.enable()\n      },\n      _slide(scroll) {\n        this.$refs.slide.slide.enable()\n        scroll.disable()\n      },\n      beforeScrollHandler() {\n        // for touchstart scrollEnd\n        // cancel it, do not enable slide\n        clearTimeout(this.enableSlideTid)\n      },\n      scrollEndHandler(scroll) {\n        clearTimeout(this.enableSlideTid)\n        if (this.dblZooming) {\n          this.dblZooming = false\n          clearTimeout(this.clickTid)\n        }\n        this._hasEnableSlide = false\n        this._scrolling = false\n        scroll.enable()\n        this.enableSlideTid = setTimeout(() => {\n          this.$refs.slide.slide.enable()\n        })\n      },\n      checkBoundary(scroll, pos) {\n        if (scroll.distX && Math.abs(scroll.distX) > Math.abs(scroll.distY)) {\n          this._scrolling = true\n          const reached = scroll.distX > 0 ? pos.x >= scroll.minScrollX : pos.x <= scroll.maxScrollX\n          if (reached) {\n            this._hasEnableSlide = true\n            this._slide(scroll)\n          } else {\n            if (!this._hasEnableSlide) {\n              this._scroll(scroll)\n            }\n          }\n        } else if (scroll.distY) {\n          this._scrolling = true\n          this._scroll(scroll)\n        }\n      },\n      zoomStartHandler(scroll) {\n        this._scroll(scroll)\n      },\n      dblclickHandler(index, e) {\n        const scroll = this.$refs.items[index].scroll\n        this.dblZooming = true\n        this.zoomTo(scroll, scroll.scale > 1 ? 1 : 2, e)\n        scroll.disable()\n      },\n      itemClickHandler() {\n        clearTimeout(this.clickTid)\n        this.clickTid = setTimeout(() => {\n          !this.dblZooming && this.hide()\n        }, this.scrollOptions.bounceTime)\n      },\n      zoomTo(scroll, scale, e) {\n        scroll.zoomTo(scale, e.pageX, e.pageY)\n      }\n    },\n    components: {\n      CubePopup,\n      CubeSlide,\n      CubeSlideItem,\n      CubeScroll\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-image-preview-fade-enter, .cube-image-preview-fade-leave-active\n    opacity: 0\n  .cube-image-preview-fade-enter-active, .cube-image-preview-fade-leave-active\n    transition: all .3s ease-in-out\n\n  .cube-image-preview\n    .cube-popup-mask\n      opacity: .6\n    .cube-popup-content\n      width: 100%\n      height: 100%\n    .cube-slide-item\n      display: flex\n      align-items: center\n      justify-content: center\n      overflow: hidden\n  .cube-image-preview-container\n    height: 100%\n    margin: 0 -10px\n  .cube-image-preview-header,\n  .cube-image-preview-footer\n    position: absolute\n    left: 0\n    right: 0\n  .cube-image-preview-header\n    top: 0\n  .cube-image-preview-footer\n    bottom: 0\n  .cube-image-preview-counter\n    position: absolute\n    bottom: 50px\n    width: 100%\n    text-align: center\n    font-size: $fontsize-medium\n    color: $image-preview-counter-color\n  .cube-image-preview-item\n    position: relative\n    padding: 0 10px\n    width: 100%\n    height: 100%\n    .cube-scroll-wrapper\n      display: flex\n      align-items: center\n      justify-content: center\n    .cube-image-preview-img\n      display: block\n      height: auto\n      max-width: 100%\n      max-height: 100%\n</style>\n"]}]}