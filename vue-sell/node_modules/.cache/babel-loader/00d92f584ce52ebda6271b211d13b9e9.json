{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/drawer/drawer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/drawer/drawer.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport _defineProperty from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { prefixStyle } from '../../common/helpers/dom';\nimport CubeDrawerPanel from './drawer-panel.vue';\nimport visibilityMixin from '../../common/mixins/visibility';\nimport popupMixin from '../../common/mixins/popup';\nvar COMPONENT_NAME = 'cube-drawer';\nvar EVENT_CHANGE = 'change';\nvar EVENT_SELECT = 'select';\nvar EVENT_CANCEL = 'cancel';\nvar transform = prefixStyle('transform');\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [visibilityMixin, popupMixin],\n  props: {\n    title: {\n      type: String,\n      default: ''\n    },\n    data: {\n      type: Array,\n      default: function _default() {\n        /* istanbul ignore next */\n        return [];\n      }\n    },\n    selectedIndex: {\n      type: Array,\n      default: function _default() {\n        /* istanbul ignore next */\n        return [];\n      }\n    }\n  },\n  data: function data() {\n    return {\n      index: -1,\n      selectedVal: [],\n      selectedText: [],\n      selected: _toConsumableArray(this.selectedIndex),\n      slideStyle: _defineProperty({}, transform, 'translate3d(0, 0, 0)')\n    };\n  },\n  watch: {\n    selectedIndex: function selectedIndex(newVal) {\n      this.selected = _toConsumableArray(newVal);\n    },\n    index: function index(newIndex, oldIndex) {\n      this.showPanel();\n\n      if (newIndex < oldIndex) {\n        this.hidePanel();\n      }\n    }\n  },\n  created: function created() {\n    this.panels = [];\n  },\n  methods: {\n    show: function show() {\n      if (this.isVisible) {\n        return;\n      }\n\n      this.isVisible = true;\n      var len = this.data.length;\n\n      for (var i = 0; i < len; i++) {\n        this.index = i;\n\n        if (this.selected[i] < 0 || this.selected[i] === undefined) {\n          if (i > 0) {\n            var lastIndex = i - 1;\n            var index = this.selected[lastIndex];\n            this.changeHandler(lastIndex, this.data[lastIndex][index], index);\n          }\n\n          break;\n        }\n      }\n\n      this.computedStyle();\n    },\n    hide: function hide() {\n      this.slideStyle[transform] = 'translate3d(0, 0, 0)';\n      this.shouldHide = true;\n    },\n    addPanel: function addPanel(panel) {\n      this.panels.push(panel);\n    },\n    removePanel: function removePanel(panel) {\n      var i = this.panels.indexOf(panel);\n      this.panels.splice(i, 1);\n    },\n    transitionend: function transitionend() {\n      if (this.shouldHide) {\n        this.isVisible = false;\n        this.shouldHide = false;\n      }\n    },\n    refill: function refill(panelIndex, data, index) {\n      this.$set(this.data, panelIndex, data);\n      this.index = panelIndex;\n      this.selected = this.selected.slice(0, panelIndex);\n      this.selectedVal = this.selectedVal.slice(0, panelIndex);\n      this.selectedText = this.selectedText.slice(0, panelIndex);\n\n      if (index >= 0) {\n        this.$set(this.selected, panelIndex, index);\n        this.changeHandler(panelIndex, this.data[panelIndex][index], index);\n      }\n    },\n    showPanel: function showPanel() {\n      var index = this.index;\n      var i = 0;\n\n      while (i <= index) {\n        this.panels[i].show();\n        i++;\n      }\n\n      this.computedStyle();\n    },\n    hidePanel: function hidePanel() {\n      var len = this.data.length;\n      var i = this.index + 1;\n\n      while (i < len) {\n        this.panels[i].hide();\n        i++;\n      }\n    },\n    computedStyle: function computedStyle() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        var allWidth = 0;\n        var i = 0;\n        var index = _this.index;\n\n        while (i <= index) {\n          var el = _this.panels[i].$el;\n          allWidth += el.offsetWidth;\n          var elStyle = window.getComputedStyle(el);\n          allWidth += _parseInt(elStyle.marginLeft);\n          allWidth += _parseInt(elStyle.marginRight);\n          i++;\n        }\n\n        _this.slideStyle[transform] = \"translate3d(-\".concat(allWidth, \"px, 0, 0)\");\n      });\n    },\n    changeHandler: function changeHandler(panelIndex, item, index) {\n      if (typeof item === 'string') {\n        this.selectedVal[panelIndex] = item;\n        this.selectedText[panelIndex] = item;\n      } else {\n        this.selectedVal[panelIndex] = item.value;\n        this.selectedText[panelIndex] = item.text;\n      }\n\n      this.$set(this.selected, panelIndex, index);\n\n      if (panelIndex === this.data.length - 1) {\n        // last column\n        this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText);\n        this.hide();\n      } else {\n        this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText);\n      }\n    },\n    drawerClick: function drawerClick() {\n      this.hide();\n      this.$emit(EVENT_CANCEL);\n    }\n  },\n  components: {\n    CubeDrawerPanel: CubeDrawerPanel\n  }\n};",{"version":3,"sources":["drawer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"cube-drawer\" @click=\"drawerClick\" v-show=\"isVisible\">\n    <div class=\"cube-drawer-main\" :style=\"slideStyle\" @click.stop @transitionend=\"transitionend\">\n      <div class=\"cube-drawer-title\" v-show=\"$slots.title || title\">\n        <slot name=\"title\">{{title}}</slot>\n      </div>\n      <div class=\"cube-drawer-panels\" @transitionend.stop>\n        <slot>\n          <cube-drawer-panel\n            v-for=\"(panel, index) in data\"\n            :key=\"index\"\n            :index=\"index\"\n            :data=\"panel\" />\n        </slot>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { prefixStyle } from '../../common/helpers/dom'\n  import CubeDrawerPanel from './drawer-panel.vue'\n  import visibilityMixin from '../../common/mixins/visibility'\n  import popupMixin from '../../common/mixins/popup'\n\n  const COMPONENT_NAME = 'cube-drawer'\n  const EVENT_CHANGE = 'change'\n  const EVENT_SELECT = 'select'\n  const EVENT_CANCEL = 'cancel'\n\n  const transform = prefixStyle('transform')\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [visibilityMixin, popupMixin],\n    props: {\n      title: {\n        type: String,\n        default: ''\n      },\n      data: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      },\n      selectedIndex: {\n        type: Array,\n        default() {\n          /* istanbul ignore next */\n          return []\n        }\n      }\n    },\n    data() {\n      return {\n        index: -1,\n        selectedVal: [],\n        selectedText: [],\n        selected: [...this.selectedIndex],\n        slideStyle: {\n          [transform]: 'translate3d(0, 0, 0)'\n        }\n      }\n    },\n    watch: {\n      selectedIndex(newVal) {\n        this.selected = [...newVal]\n      },\n      index(newIndex, oldIndex) {\n        this.showPanel()\n        if (newIndex < oldIndex) {\n          this.hidePanel()\n        }\n      }\n    },\n    created() {\n      this.panels = []\n    },\n    methods: {\n      show() {\n        if (this.isVisible) {\n          return\n        }\n        this.isVisible = true\n\n        let len = this.data.length\n        for (let i = 0; i < len; i++) {\n          this.index = i\n          if (this.selected[i] < 0 || this.selected[i] === undefined) {\n            if (i > 0) {\n              const lastIndex = i - 1\n              const index = this.selected[lastIndex]\n              this.changeHandler(lastIndex, this.data[lastIndex][index], index)\n            }\n            break\n          }\n        }\n        this.computedStyle()\n      },\n      hide() {\n        this.slideStyle[transform] = 'translate3d(0, 0, 0)'\n        this.shouldHide = true\n      },\n      addPanel(panel) {\n        this.panels.push(panel)\n      },\n      removePanel(panel) {\n        const i = this.panels.indexOf(panel)\n        this.panels.splice(i, 1)\n      },\n      transitionend() {\n        if (this.shouldHide) {\n          this.isVisible = false\n          this.shouldHide = false\n        }\n      },\n      refill(panelIndex, data, index) {\n        this.$set(this.data, panelIndex, data)\n        this.index = panelIndex\n        this.selected = this.selected.slice(0, panelIndex)\n        this.selectedVal = this.selectedVal.slice(0, panelIndex)\n        this.selectedText = this.selectedText.slice(0, panelIndex)\n        if (index >= 0) {\n          this.$set(this.selected, panelIndex, index)\n          this.changeHandler(panelIndex, this.data[panelIndex][index], index)\n        }\n      },\n      showPanel() {\n        const index = this.index\n        let i = 0\n        while (i <= index) {\n          this.panels[i].show()\n          i++\n        }\n        this.computedStyle()\n      },\n      hidePanel() {\n        const len = this.data.length\n        let i = this.index + 1\n        while (i < len) {\n          this.panels[i].hide()\n          i++\n        }\n      },\n      computedStyle() {\n        this.$nextTick(() => {\n          let allWidth = 0\n          let i = 0\n          const index = this.index\n          while (i <= index) {\n            const el = this.panels[i].$el\n            allWidth += el.offsetWidth\n            const elStyle = window.getComputedStyle(el)\n            allWidth += parseInt(elStyle.marginLeft)\n            allWidth += parseInt(elStyle.marginRight)\n            i++\n          }\n          this.slideStyle[transform] = `translate3d(-${allWidth}px, 0, 0)`\n        })\n      },\n      changeHandler(panelIndex, item, index) {\n        if (typeof item === 'string') {\n          this.selectedVal[panelIndex] = item\n          this.selectedText[panelIndex] = item\n        } else {\n          this.selectedVal[panelIndex] = item.value\n          this.selectedText[panelIndex] = item.text\n        }\n        this.$set(this.selected, panelIndex, index)\n        if (panelIndex === (this.data.length - 1)) {\n          // last column\n          this.$emit(EVENT_SELECT, this.selectedVal, this.selected, this.selectedText)\n          this.hide()\n        } else {\n          this.$emit(EVENT_CHANGE, panelIndex, item, this.selectedVal, this.selected, this.selectedText)\n        }\n      },\n      drawerClick() {\n        this.hide()\n        this.$emit(EVENT_CANCEL)\n      }\n    },\n    components: {\n      CubeDrawerPanel\n    }\n  }\n</script>\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-drawer\n    position: absolute\n    z-index: 5\n    top: 0\n    right: 0\n    bottom: 0\n    left: 0\n    overflow: hidden\n    color: $drawer-color\n  .cube-drawer-main\n    position: absolute\n    top: 0\n    left: 100%\n    bottom: 0\n    max-width: 90%\n    display: flex\n    flex-direction: column\n    overflow: hidden\n    transform: translate3d(0, 0, 0)\n    transition: transform .3s ease-in-out\n    box-shadow: -2px 0 2px rgba(0, 0, 0, .2)\n  .cube-drawer-title\n    position: relative\n    padding: 0 20px\n    height: 50px\n    line-height: 50px\n    border-bottom: 1px solid $drawer-title-bdc\n    font-size: $fontsize-large\n    background-color: $drawer-title-bgc\n  .cube-drawer-panels\n    display: flex\n    flex: 1\n</style>\n"],"sourceRoot":"node_modules/cube-ui/src/components/drawer"}]}