{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/thread-loader/dist/cjs.js!/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js??ref--16-2!/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/validator/validator.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/validator/validator.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _typeof from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _Object$keys from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { parallel, cb2PromiseWithResolve, isUndef, isFunc, isString, isArray, isObject } from '../../common/helpers/util';\nimport { rules } from '../../common/helpers/validator';\nimport localeMixin from '../../common/mixins/locale';\nimport template from '../../common/helpers/string-template';\nvar COMPONENT_NAME = 'cube-validator';\nvar EVENT_INPUT = 'input';\nvar EVENT_VALIDATING = 'validating';\nvar EVENT_VALIDATED = 'validated';\nvar EVENT_MSG_CLICK = 'msg-click';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [localeMixin],\n  props: {\n    model: {\n      required: true\n    },\n    modelKey: {\n      type: String,\n      default: ''\n    },\n    rules: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    messages: {\n      type: [Object, String],\n      default: function _default() {\n        return {};\n      }\n    },\n    value: {},\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    immediate: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      valid: this.value,\n      validated: false,\n      msg: '',\n      dirty: false,\n      validating: false,\n      result: {}\n    };\n  },\n  computed: {\n    targetModel: function targetModel() {\n      var modelKey = this.modelKey;\n      var model = this.model;\n      return modelKey ? model[modelKey] : model;\n    },\n    invalid: function invalid() {\n      var valid = this.valid;\n      return isUndef(valid) ? undefined : !valid;\n    },\n    isDisabled: function isDisabled() {\n      var disabled = this.disabled;\n      var noRules = _Object$keys(this.rules).length <= 0;\n      return disabled || noRules;\n    },\n    dirtyOrValidated: function dirtyOrValidated() {\n      return (this.dirty || this.validated) && !this.validating;\n    },\n    containerClass: function containerClass() {\n      var disabled = this.isDisabled;\n\n      if (disabled) {\n        return;\n      }\n\n      return {\n        'cube-validator_invalid': this.invalid,\n        'cube-validator_valid': this.valid,\n        'cube-validator_validating': this.validating\n      };\n    }\n  },\n  watch: {\n    value: function value(newVal) {\n      this.valid = newVal;\n    },\n    targetModel: {\n      handler: function handler() {\n        if (this.isDisabled) {\n          return;\n        }\n\n        if (!this.dirty) {\n          this.dirty = true;\n        }\n\n        this.validate();\n      },\n      sync: true\n    },\n    rules: function rules() {\n      this.validate();\n    },\n    isDisabled: function isDisabled(newVal) {\n      if (!newVal && this.trigger && !this.validated) {\n        this.validate();\n      }\n    }\n  },\n  created: function created() {\n    this._validateCount = 0;\n\n    if (!this.isDisabled && this.immediate) {\n      this.validate();\n    }\n  },\n  methods: {\n    validate: function validate(cb) {\n      var promise = cb2PromiseWithResolve(cb);\n\n      if (promise) {\n        cb = promise.resolve;\n      }\n\n      if (this.isDisabled) {\n        cb && cb(this.valid);\n        return promise;\n      }\n\n      this._validateCount++;\n      var validateCount = this._validateCount;\n      var val = this.targetModel;\n      var configRules = this.rules;\n      var type = configRules.type;\n      var allTasks = [];\n      var requiredValid = true;\n\n      if (!configRules.required) {\n        // treat it as empty, no need to validate other rules\n        requiredValid = rules.required(val, true, type);\n      }\n\n      if (requiredValid) {\n        var _loop = function _loop(key) {\n          var ruleValue = configRules[key];\n          var ret = void 0;\n\n          if (isFunc(ruleValue)) {\n            ret = ruleValue(val, configRules[key], type);\n          } else {\n            ret = !rules[key] || rules[key](val, configRules[key], type);\n          }\n\n          allTasks.push(function (next) {\n            var resolve = function resolve(_ret) {\n              next({\n                key: key,\n                valid: _ret === true,\n                ret: _ret\n              });\n            };\n\n            var reject = function reject(err) {\n              next({\n                key: key,\n                valid: false,\n                ret: err\n              });\n            };\n\n            if (isObject(ret) && isFunc(ret.then)) {\n              ret.then(resolve).catch(reject);\n            } else if (isFunc(ret)) {\n              ret(resolve, reject);\n            } else {\n              next({\n                key: key,\n                valid: ret === true,\n                ret: ret\n              });\n            }\n          });\n        };\n\n        for (var key in configRules) {\n          _loop(key);\n        }\n      }\n\n      this._checkTasks(allTasks, validateCount, cb);\n\n      return promise;\n    },\n    _checkTasks: function _checkTasks(allTasks, validateCount, cb) {\n      var _this = this;\n\n      var configRules = this.rules;\n      var isValid = true;\n      var result = {};\n      var sync = true;\n      this.validating = true;\n      var model = this.targetModel;\n      parallel(allTasks, function (results) {\n        if (_this._validateCount !== validateCount) {\n          return;\n        }\n\n        _this.validating = false;\n        results.forEach(function (_ref) {\n          var key = _ref.key,\n              valid = _ref.valid,\n              ret = _ref.ret;\n          var msg = _this.messages[key] ? isFunc(_this.messages[key]) ? _this.messages[key](ret, valid) : _this.messages[key] : _this.findMessage(key, configRules[key], configRules.type, model);\n\n          if (isValid && !valid) {\n            isValid = false;\n            _this.msg = msg;\n          }\n\n          result[key] = {\n            valid: valid,\n            invalid: !valid,\n            message: msg\n          };\n        });\n\n        if (!sync) {\n          _this.$emit(EVENT_VALIDATED, isValid);\n        }\n\n        _this._updateModel(isValid, result);\n\n        cb && cb(_this.valid);\n      });\n\n      if (this.validating) {\n        sync = false; // only async validate trigger validating\n\n        this.$emit(EVENT_VALIDATING);\n        this.valid = undefined;\n        this.$emit(EVENT_INPUT, this.valid);\n      }\n    },\n    _updateModel: function _updateModel(valid, result) {\n      this.validated = true;\n      this.result = result;\n\n      if (result.required && result.required.invalid) {\n        // required\n        this.msg = result.required.message;\n      }\n\n      if (valid) {\n        this.msg = '';\n      }\n\n      this.valid = valid;\n      this.$emit(EVENT_INPUT, this.valid);\n    },\n    reset: function reset() {\n      this._validateCount++;\n      this.validating = false;\n      this.dirty = false;\n      this.result = {};\n      this.msg = '';\n      this.validated = false;\n      this.valid = undefined;\n      this.$emit(EVENT_INPUT, this.valid);\n    },\n    msgClickHandler: function msgClickHandler() {\n      this.$emit(EVENT_MSG_CLICK);\n    },\n    findMessage: function findMessage(key, config, type, val) {\n      var messages = this.$cubeMessages;\n      var lang = this.$cubeLang;\n      var NAMESPACE = 'validator';\n      var target = messages[lang][NAMESPACE][key];\n\n      if (!target) {\n        return '';\n      }\n\n      if (isString(target)) {\n        return target;\n      } else if (isFunc(target)) {\n        return target(config);\n      } else {\n        if (!target[type]) {\n          type = isArray(val) ? 'array' : _typeof(val);\n        }\n\n        return typeof target[type] === 'function' ? target[type](config) : template(target[type], config);\n      }\n    }\n  }\n};",{"version":3,"sources":["validator.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"cube-validator\" :class=\"containerClass\">\n    <div class=\"cube-validator-content\">\n      <slot></slot>\n    </div>\n    <div class=\"cube-validator-msg\" @click=\"msgClickHandler\">\n      <slot\n        name=\"message\"\n        :message=\"msg\"\n        :dirty=\"dirty\"\n        :validated=\"validated\"\n        :validating=\"validating\"\n        :result=\"result\"\n      >\n        <span class=\"cube-validator-msg-def\">{{ dirtyOrValidated ? msg : '' }}</span>\n      </slot>\n    </div>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\n  import { parallel, cb2PromiseWithResolve, isUndef, isFunc, isString, isArray, isObject } from '../../common/helpers/util'\n  import { rules } from '../../common/helpers/validator'\n  import localeMixin from '../../common/mixins/locale'\n  import template from '../../common/helpers/string-template'\n\n  const COMPONENT_NAME = 'cube-validator'\n  const EVENT_INPUT = 'input'\n  const EVENT_VALIDATING = 'validating'\n  const EVENT_VALIDATED = 'validated'\n  const EVENT_MSG_CLICK = 'msg-click'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [localeMixin],\n    props: {\n      model: {\n        required: true\n      },\n      modelKey: {\n        type: String,\n        default: ''\n      },\n      rules: {\n        type: Object,\n        default() {\n          return {}\n        }\n      },\n      messages: {\n        type: [Object, String],\n        default() {\n          return {}\n        }\n      },\n      value: {},\n      disabled: {\n        type: Boolean,\n        default: false\n      },\n      immediate: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        valid: this.value,\n        validated: false,\n        msg: '',\n        dirty: false,\n        validating: false,\n        result: {}\n      }\n    },\n    computed: {\n      targetModel() {\n        const modelKey = this.modelKey\n        const model = this.model\n        return modelKey ? model[modelKey] : model\n      },\n      invalid() {\n        const valid = this.valid\n        return isUndef(valid) ? undefined : !valid\n      },\n      isDisabled() {\n        const disabled = this.disabled\n        const noRules = Object.keys(this.rules).length <= 0\n        return disabled || noRules\n      },\n      dirtyOrValidated() {\n        return (this.dirty || this.validated) && !this.validating\n      },\n      containerClass() {\n        const disabled = this.isDisabled\n        if (disabled) {\n          return\n        }\n        return {\n          'cube-validator_invalid': this.invalid,\n          'cube-validator_valid': this.valid,\n          'cube-validator_validating': this.validating\n        }\n      }\n    },\n    watch: {\n      value(newVal) {\n        this.valid = newVal\n      },\n      targetModel: {\n        handler() {\n          if (this.isDisabled) {\n            return\n          }\n          if (!this.dirty) {\n            this.dirty = true\n          }\n\n          this.validate()\n        },\n        sync: true\n      },\n      rules() {\n        this.validate()\n      },\n      isDisabled(newVal) {\n        if (!newVal && this.trigger && !this.validated) {\n          this.validate()\n        }\n      }\n    },\n    created() {\n      this._validateCount = 0\n      if (!this.isDisabled && this.immediate) {\n        this.validate()\n      }\n    },\n    methods: {\n      validate(cb) {\n        const promise = cb2PromiseWithResolve(cb)\n        if (promise) {\n          cb = promise.resolve\n        }\n        if (this.isDisabled) {\n          cb && cb(this.valid)\n          return promise\n        }\n        this._validateCount++\n        const validateCount = this._validateCount\n        const val = this.targetModel\n\n        const configRules = this.rules\n        const type = configRules.type\n        const allTasks = []\n\n        let requiredValid = true\n        if (!configRules.required) {\n          // treat it as empty, no need to validate other rules\n          requiredValid = rules.required(val, true, type)\n        }\n\n        if (requiredValid) {\n          for (const key in configRules) {\n            const ruleValue = configRules[key]\n            let ret\n            if (isFunc(ruleValue)) {\n              ret = ruleValue(val, configRules[key], type)\n            } else {\n              ret = !rules[key] || rules[key](val, configRules[key], type)\n            }\n            allTasks.push((next) => {\n              const resolve = (_ret) => {\n                next({\n                  key: key,\n                  valid: _ret === true,\n                  ret: _ret\n                })\n              }\n              const reject = (err) => {\n                next({\n                  key: key,\n                  valid: false,\n                  ret: err\n                })\n              }\n              if (isObject(ret) && isFunc(ret.then)) {\n                ret.then(resolve).catch(reject)\n              } else if (isFunc(ret)) {\n                ret(resolve, reject)\n              } else {\n                next({\n                  key: key,\n                  valid: ret === true,\n                  ret: ret\n                })\n              }\n            })\n          }\n        }\n        this._checkTasks(allTasks, validateCount, cb)\n        return promise\n      },\n      _checkTasks(allTasks, validateCount, cb) {\n        const configRules = this.rules\n        let isValid = true\n        const result = {}\n        let sync = true\n        this.validating = true\n        const model = this.targetModel\n        parallel(allTasks, (results) => {\n          if (this._validateCount !== validateCount) {\n            return\n          }\n          this.validating = false\n          results.forEach(({ key, valid, ret }) => {\n            const msg = this.messages[key]\n                      ? isFunc(this.messages[key])\n                        ? this.messages[key](ret, valid)\n                        : this.messages[key]\n                      : this.findMessage(key, configRules[key], configRules.type, model)\n            if (isValid && !valid) {\n              isValid = false\n              this.msg = msg\n            }\n            result[key] = {\n              valid: valid,\n              invalid: !valid,\n              message: msg\n            }\n          })\n          if (!sync) {\n            this.$emit(EVENT_VALIDATED, isValid)\n          }\n          this._updateModel(isValid, result)\n          cb && cb(this.valid)\n        })\n        if (this.validating) {\n          sync = false\n          // only async validate trigger validating\n          this.$emit(EVENT_VALIDATING)\n          this.valid = undefined\n          this.$emit(EVENT_INPUT, this.valid)\n        }\n      },\n      _updateModel(valid, result) {\n        this.validated = true\n        this.result = result\n        if (result.required && result.required.invalid) {\n          // required\n          this.msg = result.required.message\n        }\n\n        if (valid) {\n          this.msg = ''\n        }\n        this.valid = valid\n        this.$emit(EVENT_INPUT, this.valid)\n      },\n      reset() {\n        this._validateCount++\n        this.validating = false\n        this.dirty = false\n        this.result = {}\n        this.msg = ''\n        this.validated = false\n        this.valid = undefined\n        this.$emit(EVENT_INPUT, this.valid)\n      },\n      msgClickHandler() {\n        this.$emit(EVENT_MSG_CLICK)\n      },\n      findMessage (key, config, type, val) {\n        const messages = this.$cubeMessages\n        const lang = this.$cubeLang\n        const NAMESPACE = 'validator'\n        const target = messages[lang][NAMESPACE][key]\n        if (!target) {\n          return ''\n        }\n        if (isString(target)) {\n          return target\n        } else if (isFunc(target)) {\n          return target(config)\n        } else {\n          if (!target[type]) {\n            type = isArray(val) ? 'array' : typeof val\n          }\n          return typeof target[type] === 'function' ? target[type](config) : template(target[type], config)\n        }\n      }\n    }\n  }\n</script>\n\n<style lang=\"stylus\">\n  @require \"../../common/stylus/variable.styl\"\n\n  .cube-validator\n    .cube-checkbox, .cube-radio\n      color: inherit\n    .cube-input\n      input\n        color: inherit\n    .cube-textarea\n      color: inherit\n    .cube-select\n      color: inherit\n  .cube-validator-msg-def\n    font-size: $fontsize-medium\n    color: $validator-msg-def-color\n</style>\n"],"sourceRoot":"node_modules/cube-ui/src/components/validator"}]}