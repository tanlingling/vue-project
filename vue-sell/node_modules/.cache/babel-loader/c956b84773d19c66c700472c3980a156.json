{"remainingRequest":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/form/form-item.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/git/vue-sell/node_modules/cube-ui/src/components/form/form-item.vue","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/git/vue-sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$keys from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"/Users/tanlingling/git/vue-sell/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { processField } from './fields/index';\nimport { resetTypeValue, cb2PromiseWithResolve, debounce } from '../../common/helpers/util';\nimport CubeValidator from '../validator/validator.vue';\nimport LAYOUTS from './layouts';\nimport { getResetValueByType } from './fields/reset';\nimport mixin from './mixin';\nimport components from './components';\ncomponents.CubeValidator = CubeValidator;\nvar COMPONENT_NAME = 'cube-form-item';\nvar EVENT_FOCUSIN = 'focusin';\nvar EVENT_FOCUSOUT = 'focusout';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [mixin],\n  props: {\n    field: {\n      type: Object,\n      default: function _default() {\n        /* istanbul ignore next */\n        return {};\n      }\n    }\n  },\n  data: function data() {\n    var validatorModelKey = 'value';\n    var modelKey = this.field.modelKey;\n    var modelValue = modelKey ? this.form.model[modelKey] : null;\n    return {\n      validatorDisabled: false,\n      validatorModelKey: validatorModelKey,\n      modelValue: modelValue,\n      validatorModel: _defineProperty({}, validatorModelKey, modelValue)\n    };\n  },\n  computed: {\n    fieldValue: function fieldValue() {\n      return processField(this.field);\n    },\n    hasRules: function hasRules() {\n      return _Object$keys(this.fieldValue.rules || {}).length > 0;\n    },\n    isBtnField: function isBtnField() {\n      return this.fieldValue.type === 'button';\n    },\n    itemClass: function itemClass() {\n      var rules = this.fieldValue.rules;\n      return {\n        // only handle required rule for now\n        'cube-form-item_required': rules && rules.required,\n        'cube-form-item_btn': this.isBtnField,\n        'cube-form-item_validating': this.validating,\n        'cube-form-item_pending': this.pending,\n        'cube-form-item_valid': this.valid,\n        'cube-form-item_invalid': this.invalid\n      };\n    },\n    modelVal: function modelVal() {\n      return this.form.model[this.fieldValue.modelKey];\n    },\n    componentName: function componentName() {\n      var fieldValue = this.fieldValue;\n      var component = fieldValue.component;\n\n      if (component) {\n        return component;\n      }\n\n      var type = fieldValue.type;\n      var cubeType = \"cube-\".concat(type);\n\n      if (components[cubeType]) {\n        return cubeType;\n      }\n\n      return type;\n    }\n  },\n  watch: {\n    modelVal: function modelVal(newModel) {\n      if (this.modelValue !== newModel) {\n        this.modelValue = newModel;\n      }\n    },\n    modelValue: {\n      handler: function handler(newModel) {\n        // update form model\n        this.form.model[this.fieldValue.modelKey] = newModel;\n        this.updateValidatorModel();\n      },\n      sync: true\n    },\n    originValid: function originValid(newVal) {\n      this.lastOriginValid = newVal;\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    this.form = this.$parent.form;\n  },\n  created: function created() {\n    var _this = this;\n\n    this.form.addField(this);\n\n    this.getValidatorModel = function (modelValue) {\n      _this.pending = false;\n      return modelValue;\n    };\n  },\n  mounted: function mounted() {\n    this.initDebounce();\n    this.initFocusEvents();\n  },\n  methods: {\n    initDebounce: function initDebounce() {\n      var _this2 = this;\n\n      var debounceTime = this.fieldValue.debounce;\n\n      if (debounceTime === true) {\n        debounceTime = 200;\n      }\n\n      if (!debounceTime && debounceTime !== 0 || debounceTime < 0 || this.fieldValue.trigger === 'blur') return;\n      this.getValidatorModel = debounce(function (modelValue) {\n        _this2.pending = false;\n        _this2.validatorModel[_this2.validatorModelKey] = modelValue;\n\n        _this2.form.updatePending();\n\n        _this2.validate();\n\n        return modelValue;\n      }, debounceTime, false, this.validatorModel[this.validatorModelKey]);\n    },\n    focusInHandler: function focusInHandler() {\n      this.focused = true;\n    },\n    focusOutHandler: function focusOutHandler() {\n      this.focused = false;\n      this.updateValidatorModel();\n      this.validate();\n    },\n    initFocusEvents: function initFocusEvents() {\n      var _this3 = this;\n\n      if (this.fieldValue.trigger === 'blur') {\n        var formItem = this.$refs.formItem;\n        formItem.addEventListener(EVENT_FOCUSIN, this.focusInHandler, false);\n        formItem.addEventListener(EVENT_FOCUSOUT, this.focusOutHandler, false);\n\n        this.getValidatorModel = function (modelValue) {\n          if (_this3.focused) {\n            return _this3.validatorModel[_this3.validatorModelKey];\n          } else {\n            _this3.pending = false;\n\n            _this3.form.updatePending();\n\n            return modelValue;\n          }\n        };\n      }\n    },\n    removeFocusEvents: function removeFocusEvents() {\n      var formItem = this.$refs.formItem;\n      formItem.removeEventListener(EVENT_FOCUSIN, this.focusInHandler, false);\n      formItem.removeEventListener(EVENT_FOCUSOUT, this.focusOutHandler, false);\n    },\n    updateValidatorModel: function updateValidatorModel() {\n      this.pending = true;\n      this.validatorModel[this.validatorModelKey] = this.getValidatorModel(this.modelValue);\n\n      if (this.pending) {\n        this.form.setPending(this.pending);\n        this.originValid = undefined;\n      }\n    },\n    validatorChangeHandler: function validatorChangeHandler() {\n      // disabled or true to true no update validity\n      if (this.validatorDisabled || this.originValid && this.lastOriginValid) {\n        return;\n      }\n\n      this.updateValidity();\n    },\n    validatingHandler: function validatingHandler() {\n      this.validating = true;\n      this.form.setValidating(true);\n    },\n    validatedHandler: function validatedHandler() {\n      this.validating = false;\n      this.form.updateValidating();\n    },\n    updateValidity: function updateValidity() {\n      var validator = this.$refs.validator;\n\n      if (validator) {\n        // sync update validaty\n        this.form.updateValidity(this.fieldValue.modelKey, validator.valid, validator.result, validator.dirty);\n      }\n    },\n    validate: function validate(cb) {\n      var _this4 = this;\n\n      var promise = cb2PromiseWithResolve(cb);\n\n      if (promise) {\n        cb = promise.resolve;\n      }\n\n      var validator = this.$refs.validator;\n\n      if (validator) {\n        validator.validate(function () {\n          _this4.validatorDisabled = true;\n\n          _this4.updateValidity();\n\n          cb && cb();\n\n          _this4.$nextTick(function () {\n            _this4.validatorDisabled = false;\n          });\n        });\n      } else {\n        cb && cb();\n      }\n\n      return promise;\n    },\n    reset: function reset() {\n      var _this5 = this;\n\n      var fieldValue = this.fieldValue;\n\n      if (fieldValue.modelKey) {\n        var defValue = getResetValueByType(fieldValue.type);\n        this.validatorDisabled = true;\n        resetTypeValue(this, 'modelValue', defValue);\n        this.$refs.validator && this.$refs.validator.reset();\n        this.$nextTick(function () {\n          _this5.validatorDisabled = false;\n        });\n      }\n\n      this.validating = false;\n      this.pending = false;\n    },\n    msgClick: function msgClick() {\n      /* istanbul ignore if */\n      if (this.form.layout !== LAYOUTS.STANDARD) {\n        return;\n      }\n      /* istanbul ignore next */\n\n\n      this.$createToast && this.$createToast({\n        type: 'warn',\n        txt: this.$refs.validator.msg,\n        time: 1000\n      }).show();\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.removeFocusEvents();\n    this.form.destroyField(this);\n    this.form = null;\n  },\n  components: components\n};",{"version":3,"sources":["form-item.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div class=\"cube-form-item border-bottom-1px\" ref=\"formItem\" :class=\"itemClass\">\n    <template v-if=\"!isBtnField\">\n      <slot name=\"label\">\n        <div class=\"cube-form-label\" v-show=\"fieldValue.label\"><span>{{fieldValue.label}}</span></div>\n      </slot>\n      <cube-validator\n        class=\"cube-form-field\"\n        v-if=\"hasRules\"\n        ref=\"validator\"\n        v-model=\"originValid\"\n        :disabled=\"validatorDisabled\"\n        :model=\"validatorModel\"\n        :model-key=\"validatorModelKey\"\n        :rules=\"fieldValue.rules\"\n        :messages=\"fieldValue.messages\"\n        @input=\"validatorChangeHandler\"\n        @validating=\"validatingHandler\"\n        @validated=\"validatedHandler\"\n        @msg-click=\"msgClick\"\n      >\n        <slot>\n          <component :is=\"componentName\" v-model=\"modelValue\" v-bind=\"fieldValue.props\" v-on=\"fieldValue.events\"></component>\n        </slot>\n      </cube-validator>\n      <div class=\"cube-form-field\" v-else>\n        <slot>\n          <component :is=\"componentName\" v-model=\"modelValue\" v-bind=\"fieldValue.props\" v-on=\"fieldValue.events\"></component>\n        </slot>\n      </div>\n    </template>\n    <cube-button v-bind=\"fieldValue.props\" v-else>{{fieldValue.label}}</cube-button>\n  </div>\n</template>\n\n<script>\n  import { processField } from './fields/index'\n  import { resetTypeValue, cb2PromiseWithResolve, debounce } from '../../common/helpers/util'\n  import CubeValidator from '../validator/validator.vue'\n  import LAYOUTS from './layouts'\n  import { getResetValueByType } from './fields/reset'\n  import mixin from './mixin'\n  import components from './components'\n  components.CubeValidator = CubeValidator\n\n  const COMPONENT_NAME = 'cube-form-item'\n  const EVENT_FOCUSIN = 'focusin'\n  const EVENT_FOCUSOUT = 'focusout'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [mixin],\n    props: {\n      field: {\n        type: Object,\n        default() {\n          /* istanbul ignore next */\n          return {}\n        }\n      }\n    },\n    data() {\n      const validatorModelKey = 'value'\n      const modelKey = this.field.modelKey\n      const modelValue = modelKey ? this.form.model[modelKey] : null\n      return {\n        validatorDisabled: false,\n        validatorModelKey,\n        modelValue: modelValue,\n        validatorModel: {\n          [validatorModelKey]: modelValue\n        }\n      }\n    },\n    computed: {\n      fieldValue() {\n        return processField(this.field)\n      },\n      hasRules() {\n        return Object.keys(this.fieldValue.rules || {}).length > 0\n      },\n      isBtnField() {\n        return this.fieldValue.type === 'button'\n      },\n      itemClass() {\n        const rules = this.fieldValue.rules\n        return {\n          // only handle required rule for now\n          'cube-form-item_required': rules && rules.required,\n          'cube-form-item_btn': this.isBtnField,\n          'cube-form-item_validating': this.validating,\n          'cube-form-item_pending': this.pending,\n          'cube-form-item_valid': this.valid,\n          'cube-form-item_invalid': this.invalid\n        }\n      },\n      modelVal() {\n        return this.form.model[this.fieldValue.modelKey]\n      },\n      componentName() {\n        const fieldValue = this.fieldValue\n        const component = fieldValue.component\n        if (component) {\n          return component\n        }\n        const type = fieldValue.type\n        const cubeType = `cube-${type}`\n        if (components[cubeType]) {\n          return cubeType\n        }\n        return type\n      }\n    },\n    watch: {\n      modelVal(newModel) {\n        if (this.modelValue !== newModel) {\n          this.modelValue = newModel\n        }\n      },\n      modelValue: {\n        handler(newModel) {\n          // update form model\n          this.form.model[this.fieldValue.modelKey] = newModel\n          this.updateValidatorModel()\n        },\n        sync: true\n      },\n      originValid(newVal) {\n        this.lastOriginValid = newVal\n      }\n    },\n    beforeCreate() {\n      this.form = this.$parent.form\n    },\n    created() {\n      this.form.addField(this)\n      this.getValidatorModel = (modelValue) => {\n        this.pending = false\n        return modelValue\n      }\n    },\n    mounted() {\n      this.initDebounce()\n      this.initFocusEvents()\n    },\n    methods: {\n      initDebounce() {\n        let debounceTime = this.fieldValue.debounce\n        if (debounceTime === true) {\n          debounceTime = 200\n        }\n        if ((!debounceTime && debounceTime !== 0) || debounceTime < 0 || this.fieldValue.trigger === 'blur') return\n        this.getValidatorModel = debounce((modelValue) => {\n          this.pending = false\n          this.validatorModel[this.validatorModelKey] = modelValue\n          this.form.updatePending()\n          this.validate()\n          return modelValue\n        }, debounceTime, false, this.validatorModel[this.validatorModelKey])\n      },\n      focusInHandler() {\n        this.focused = true\n      },\n      focusOutHandler() {\n        this.focused = false\n        this.updateValidatorModel()\n        this.validate()\n      },\n      initFocusEvents() {\n        if (this.fieldValue.trigger === 'blur') {\n          const formItem = this.$refs.formItem\n          formItem.addEventListener(EVENT_FOCUSIN, this.focusInHandler, false)\n          formItem.addEventListener(EVENT_FOCUSOUT, this.focusOutHandler, false)\n          this.getValidatorModel = (modelValue) => {\n            if (this.focused) {\n              return this.validatorModel[this.validatorModelKey]\n            } else {\n              this.pending = false\n              this.form.updatePending()\n              return modelValue\n            }\n          }\n        }\n      },\n      removeFocusEvents() {\n        const formItem = this.$refs.formItem\n        formItem.removeEventListener(EVENT_FOCUSIN, this.focusInHandler, false)\n        formItem.removeEventListener(EVENT_FOCUSOUT, this.focusOutHandler, false)\n      },\n      updateValidatorModel() {\n        this.pending = true\n        this.validatorModel[this.validatorModelKey] = this.getValidatorModel(this.modelValue)\n        if (this.pending) {\n          this.form.setPending(this.pending)\n          this.originValid = undefined\n        }\n      },\n      validatorChangeHandler() {\n        // disabled or true to true no update validity\n        if (this.validatorDisabled || (this.originValid && this.lastOriginValid)) {\n          return\n        }\n        this.updateValidity()\n      },\n      validatingHandler() {\n        this.validating = true\n        this.form.setValidating(true)\n      },\n      validatedHandler() {\n        this.validating = false\n        this.form.updateValidating()\n      },\n      updateValidity() {\n        const validator = this.$refs.validator\n        if (validator) {\n          // sync update validaty\n          this.form.updateValidity(this.fieldValue.modelKey, validator.valid, validator.result, validator.dirty)\n        }\n      },\n      validate(cb) {\n        const promise = cb2PromiseWithResolve(cb)\n        if (promise) {\n          cb = promise.resolve\n        }\n        const validator = this.$refs.validator\n        if (validator) {\n          validator.validate(() => {\n            this.validatorDisabled = true\n            this.updateValidity()\n            cb && cb()\n            this.$nextTick(() => {\n              this.validatorDisabled = false\n            })\n          })\n        } else {\n          cb && cb()\n        }\n        return promise\n      },\n      reset() {\n        const fieldValue = this.fieldValue\n        if (fieldValue.modelKey) {\n          const defValue = getResetValueByType(fieldValue.type)\n          this.validatorDisabled = true\n          resetTypeValue(this, 'modelValue', defValue)\n          this.$refs.validator && this.$refs.validator.reset()\n          this.$nextTick(() => {\n            this.validatorDisabled = false\n          })\n        }\n        this.validating = false\n        this.pending = false\n      },\n      msgClick() {\n        /* istanbul ignore if */\n        if (this.form.layout !== LAYOUTS.STANDARD) {\n          return\n        }\n        /* istanbul ignore next */\n        this.$createToast && this.$createToast({\n          type: 'warn',\n          txt: this.$refs.validator.msg,\n          time: 1000\n        }).show()\n      }\n    },\n    beforeDestroy() {\n      this.removeFocusEvents()\n      this.form.destroyField(this)\n      this.form = null\n    },\n    components\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-form-item\n    position: relative\n    display: flex\n    align-items: center\n    padding: 0 15px\n    &:last-child\n      &::after\n        display: none\n    .cube-checkbox-group, .cube-radio-group\n      background-color: transparent\n    .cube-checkbox, .cube-radio\n      padding-left: 0\n      padding-right: 0\n  .cube-form-item_btn\n    margin: 15px 0\n    &::after\n      display: none\n  .cube-form-label\n    display: flex\n    align-items: center\n    word-wrap: break-word\n    word-break: break-word\n  .cube-form-item_required\n    .cube-form-label\n      &::before\n        content: \"*\"\n        display: block\n        margin-top: 1px\n        margin-right: .3em\n        color: $form-label-required-color\n</style>\n"],"sourceRoot":"node_modules/cube-ui/src/components/form"}]}