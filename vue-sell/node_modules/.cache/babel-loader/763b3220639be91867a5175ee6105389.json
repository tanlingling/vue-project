{"remainingRequest":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js??ref--16-1!/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/form/form.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/tanlingling/Desktop/sell/node_modules/cube-ui/src/components/form/form.vue","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tanlingling/Desktop/sell/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _Object$assign from \"/Users/tanlingling/Desktop/sell/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/web.dom.iterable\";\n//\n//\n//\n//\n//\n//\n//\n//\nimport { dispatchEvent } from '../../common/helpers/dom';\nimport { cb2PromiseWithResolve } from '../../common/helpers/util';\nimport CubeFormGroup from './form-group.vue';\nimport LAYOUTS from './layouts';\nimport mixin from './mixin';\nvar COMPONENT_NAME = 'cube-form';\nvar EVENT_SUBMIT = 'submit';\nvar EVENT_RESET = 'reset';\nvar EVENT_VALIDATE = 'validate';\nvar EVENT_VALID = 'valid';\nvar EVENT_INVALID = 'invalid';\nexport default {\n  name: COMPONENT_NAME,\n  mixins: [mixin],\n  props: {\n    action: String,\n    model: {\n      type: Object,\n      default: function _default() {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    schema: {\n      type: Object,\n      default: function _default() {\n        /* istanbul ignore next */\n        return {};\n      }\n    },\n    options: {\n      type: Object,\n      default: function _default() {\n        return {\n          scrollToInvalidField: false,\n          layout: LAYOUTS.STANDARD\n        };\n      }\n    },\n    immediateValidate: {\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      validatedCount: 0,\n      dirty: false,\n      firstInvalidField: null,\n      firstInvalidFieldIndex: -1\n    };\n  },\n  computed: {\n    groups: function groups() {\n      var schema = this.schema;\n      var groups = schema.groups || [];\n\n      if (schema.fields) {\n        groups.unshift({\n          fields: schema.fields\n        });\n      }\n\n      return groups;\n    },\n    layout: function layout() {\n      var options = this.options;\n      var layout = options && options.layout || LAYOUTS.STANDARD;\n      return layout;\n    },\n    formClass: function formClass() {\n      var invalid = this.invalid;\n      var valid = this.valid;\n      var layout = this.layout;\n      return {\n        'cube-form_standard': layout === LAYOUTS.STANDARD,\n        'cube-form_groups': this.groups.length > 1,\n        'cube-form_validating': this.validating,\n        'cube-form_pending': this.pending,\n        'cube-form_valid': valid,\n        'cube-form_invalid': invalid,\n        'cube-form_classic': layout === LAYOUTS.CLASSIC,\n        'cube-form_fresh': layout === LAYOUTS.FRESH\n      };\n    }\n  },\n  watch: {\n    validatedCount: function validatedCount() {\n      this.$emit(EVENT_VALIDATE, {\n        validity: this.validity,\n        valid: this.valid,\n        invalid: this.invalid,\n        dirty: this.dirty,\n        firstInvalidFieldIndex: this.firstInvalidFieldIndex\n      });\n    }\n  },\n  beforeCreate: function beforeCreate() {\n    this.form = this;\n    this.fields = [];\n    this.validity = {};\n  },\n  mounted: function mounted() {\n    if (this.immediateValidate) {\n      this.validate();\n    }\n  },\n  methods: {\n    submit: function submit() {\n      var skipValidate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.skipValidate = skipValidate;\n      dispatchEvent(this.$refs.form, 'submit');\n      this.skipValidate = false;\n    },\n    reset: function reset() {\n      dispatchEvent(this.$refs.form, 'reset');\n    },\n    submitHandler: function submitHandler(e) {\n      var _this = this;\n\n      if (this.skipValidate) {\n        this.$emit(EVENT_SUBMIT, e, this.model);\n        return;\n      }\n\n      var submited = function submited(submitResult) {\n        if (submitResult) {\n          _this.$emit(EVENT_VALID, _this.validity);\n\n          _this.$emit(EVENT_SUBMIT, e, _this.model);\n        } else {\n          e.preventDefault();\n\n          _this.$emit(EVENT_INVALID, _this.validity);\n        }\n      };\n\n      if (this.valid === undefined) {\n        this._submit(submited);\n\n        if (this.validating || this.pending) {\n          // async validate\n          e.preventDefault();\n        }\n      } else {\n        submited(this.valid);\n      }\n    },\n    resetHandler: function resetHandler(e) {\n      this._reset();\n\n      this.$emit(EVENT_RESET, e);\n    },\n    _submit: function _submit(cb) {\n      var _this2 = this;\n\n      this.validate(function () {\n        if (_this2.invalid) {\n          if (_this2.options.scrollToInvalidField && _this2.firstInvalidField) {\n            _this2.firstInvalidField.$el.scrollIntoView();\n          }\n        }\n\n        cb && cb(_this2.valid);\n      });\n    },\n    _reset: function _reset() {\n      this.fields.forEach(function (fieldComponent) {\n        fieldComponent.reset();\n      });\n      this.setValidity();\n      this.setValidating();\n      this.setPending();\n    },\n    validate: function validate(cb) {\n      var _this3 = this;\n\n      var promise = cb2PromiseWithResolve(cb);\n\n      if (promise) {\n        cb = promise.resolve;\n      }\n\n      var doneCount = 0;\n      var len = this.fields.length;\n      this.originValid = undefined;\n      this.fields.forEach(function (fieldComponent) {\n        fieldComponent.validate(function () {\n          doneCount++;\n\n          if (doneCount === len) {\n            // all done\n            cb && cb(_this3.valid);\n          }\n        });\n      });\n      return promise;\n    },\n    updateValidating: function updateValidating() {\n      var validating = this.fields.some(function (fieldComponent) {\n        return fieldComponent.validating;\n      });\n      this.setValidating(validating);\n    },\n    updatePending: function updatePending() {\n      var pending = this.fields.some(function (fieldComponent) {\n        return fieldComponent.pending;\n      });\n      this.setPending(pending);\n    },\n    setValidating: function setValidating() {\n      var validating = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.validating = validating;\n    },\n    setPending: function setPending() {\n      var pending = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      this.pending = pending;\n    },\n    updateValidity: function updateValidity(modelKey, valid, result, dirty) {\n      var curResult = this.validity[modelKey];\n\n      if (curResult && curResult.valid === valid && curResult.result === result && curResult.dirty === dirty) {\n        return;\n      }\n\n      this.setValidity(modelKey, {\n        valid: valid,\n        result: result,\n        dirty: dirty\n      });\n    },\n    setValidity: function setValidity(key, val) {\n      var validity = {};\n\n      if (key) {\n        _Object$assign(validity, this.validity);\n\n        if (val === undefined) {\n          delete validity[key];\n        } else {\n          validity[key] = val;\n        }\n      }\n\n      var dirty = false;\n      var invalid = false;\n      var valid = true;\n      var firstInvalidFieldKey = '';\n      this.fields.forEach(function (fieldComponent) {\n        var modelKey = fieldComponent.fieldValue.modelKey;\n\n        if (modelKey) {\n          var retVal = validity[modelKey];\n\n          if (retVal) {\n            if (retVal.dirty) {\n              dirty = true;\n            }\n\n            if (retVal.valid === false) {\n              valid = false;\n            } else if (valid && !retVal.valid) {\n              valid = retVal.valid;\n            }\n\n            if (!invalid && retVal.valid === false) {\n              // invalid\n              invalid = true;\n              firstInvalidFieldKey = modelKey;\n            }\n          } else if (fieldComponent.hasRules) {\n            if (valid) {\n              valid = undefined;\n            }\n\n            validity[modelKey] = {\n              valid: undefined,\n              result: {},\n              dirty: false\n            };\n          }\n        }\n      });\n      this.validity = validity;\n      this.dirty = dirty;\n      this.originValid = valid;\n      this.setFirstInvalid(firstInvalidFieldKey);\n      this.validatedCount++;\n    },\n    setFirstInvalid: function setFirstInvalid(key) {\n      var _this4 = this;\n\n      if (!key) {\n        this.firstInvalidField = null;\n        this.firstInvalidFieldIndex = -1;\n        return;\n      }\n\n      this.fields.some(function (fieldComponent, index) {\n        if (fieldComponent.fieldValue.modelKey === key) {\n          _this4.firstInvalidField = fieldComponent;\n          _this4.firstInvalidFieldIndex = index;\n          return true;\n        }\n      });\n    },\n    addField: function addField(fieldComponent) {\n      this.fields.push(fieldComponent);\n    },\n    destroyField: function destroyField(fieldComponent) {\n      var i = this.fields.indexOf(fieldComponent);\n      this.fields.splice(i, 1);\n      this.setValidity(fieldComponent.fieldValue.modelKey);\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    this.form = null;\n    this.firstInvalidField = null;\n  },\n  components: {\n    CubeFormGroup: CubeFormGroup\n  }\n};",{"version":3,"sources":["form.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <form ref=\"form\" class=\"cube-form\" :class=\"formClass\" :action=\"action\" @submit=\"submitHandler\" @reset=\"resetHandler\">\n    <slot>\n      <cube-form-group v-for=\"(group, index) in groups\" :fields=\"group.fields\" :legend=\"group.legend\" :key=\"index\" />\n    </slot>\n  </form>\n</template>\n\n<script>\n  import { dispatchEvent } from '../../common/helpers/dom'\n  import { cb2PromiseWithResolve } from '../../common/helpers/util'\n  import CubeFormGroup from './form-group.vue'\n  import LAYOUTS from './layouts'\n  import mixin from './mixin'\n\n  const COMPONENT_NAME = 'cube-form'\n  const EVENT_SUBMIT = 'submit'\n  const EVENT_RESET = 'reset'\n  const EVENT_VALIDATE = 'validate'\n  const EVENT_VALID = 'valid'\n  const EVENT_INVALID = 'invalid'\n\n  export default {\n    name: COMPONENT_NAME,\n    mixins: [mixin],\n    props: {\n      action: String,\n      model: {\n        type: Object,\n        default() {\n          /* istanbul ignore next */\n          return {}\n        }\n      },\n      schema: {\n        type: Object,\n        default() {\n          /* istanbul ignore next */\n          return {}\n        }\n      },\n      options: {\n        type: Object,\n        default() {\n          return {\n            scrollToInvalidField: false,\n            layout: LAYOUTS.STANDARD\n          }\n        }\n      },\n      immediateValidate: {\n        type: Boolean,\n        default: false\n      }\n    },\n    data() {\n      return {\n        validatedCount: 0,\n        dirty: false,\n        firstInvalidField: null,\n        firstInvalidFieldIndex: -1\n      }\n    },\n    computed: {\n      groups() {\n        const schema = this.schema\n        const groups = schema.groups || []\n        if (schema.fields) {\n          groups.unshift({\n            fields: schema.fields\n          })\n        }\n        return groups\n      },\n      layout() {\n        const options = this.options\n        const layout = (options && options.layout) || LAYOUTS.STANDARD\n        return layout\n      },\n      formClass() {\n        const invalid = this.invalid\n        const valid = this.valid\n        const layout = this.layout\n        return {\n          'cube-form_standard': layout === LAYOUTS.STANDARD,\n          'cube-form_groups': this.groups.length > 1,\n          'cube-form_validating': this.validating,\n          'cube-form_pending': this.pending,\n          'cube-form_valid': valid,\n          'cube-form_invalid': invalid,\n          'cube-form_classic': layout === LAYOUTS.CLASSIC,\n          'cube-form_fresh': layout === LAYOUTS.FRESH\n        }\n      }\n    },\n    watch: {\n      validatedCount() {\n        this.$emit(EVENT_VALIDATE, {\n          validity: this.validity,\n          valid: this.valid,\n          invalid: this.invalid,\n          dirty: this.dirty,\n          firstInvalidFieldIndex: this.firstInvalidFieldIndex\n        })\n      }\n    },\n    beforeCreate() {\n      this.form = this\n      this.fields = []\n      this.validity = {}\n    },\n    mounted() {\n      if (this.immediateValidate) {\n        this.validate()\n      }\n    },\n    methods: {\n      submit(skipValidate = false) {\n        this.skipValidate = skipValidate\n        dispatchEvent(this.$refs.form, 'submit')\n        this.skipValidate = false\n      },\n      reset() {\n        dispatchEvent(this.$refs.form, 'reset')\n      },\n      submitHandler(e) {\n        if (this.skipValidate) {\n          this.$emit(EVENT_SUBMIT, e, this.model)\n          return\n        }\n        const submited = (submitResult) => {\n          if (submitResult) {\n            this.$emit(EVENT_VALID, this.validity)\n            this.$emit(EVENT_SUBMIT, e, this.model)\n          } else {\n            e.preventDefault()\n            this.$emit(EVENT_INVALID, this.validity)\n          }\n        }\n        if (this.valid === undefined) {\n          this._submit(submited)\n          if (this.validating || this.pending) {\n            // async validate\n            e.preventDefault()\n          }\n        } else {\n          submited(this.valid)\n        }\n      },\n      resetHandler(e) {\n        this._reset()\n        this.$emit(EVENT_RESET, e)\n      },\n      _submit(cb) {\n        this.validate(() => {\n          if (this.invalid) {\n            if (this.options.scrollToInvalidField && this.firstInvalidField) {\n              this.firstInvalidField.$el.scrollIntoView()\n            }\n          }\n          cb && cb(this.valid)\n        })\n      },\n      _reset() {\n        this.fields.forEach((fieldComponent) => {\n          fieldComponent.reset()\n        })\n        this.setValidity()\n        this.setValidating()\n        this.setPending()\n      },\n      validate(cb) {\n        const promise = cb2PromiseWithResolve(cb)\n        if (promise) {\n          cb = promise.resolve\n        }\n        let doneCount = 0\n        const len = this.fields.length\n        this.originValid = undefined\n        this.fields.forEach((fieldComponent) => {\n          fieldComponent.validate(() => {\n            doneCount++\n            if (doneCount === len) {\n              // all done\n              cb && cb(this.valid)\n            }\n          })\n        })\n        return promise\n      },\n      updateValidating() {\n        const validating = this.fields.some((fieldComponent) => fieldComponent.validating)\n        this.setValidating(validating)\n      },\n      updatePending() {\n        const pending = this.fields.some((fieldComponent) => fieldComponent.pending)\n        this.setPending(pending)\n      },\n      setValidating(validating = false) {\n        this.validating = validating\n      },\n      setPending(pending = false) {\n        this.pending = pending\n      },\n      updateValidity(modelKey, valid, result, dirty) {\n        const curResult = this.validity[modelKey]\n        if (curResult && curResult.valid === valid && curResult.result === result && curResult.dirty === dirty) {\n          return\n        }\n        this.setValidity(modelKey, {\n          valid,\n          result,\n          dirty\n        })\n      },\n      setValidity(key, val) {\n        let validity = {}\n        if (key) {\n          Object.assign(validity, this.validity)\n          if (val === undefined) {\n            delete validity[key]\n          } else {\n            validity[key] = val\n          }\n        }\n\n        let dirty = false\n        let invalid = false\n        let valid = true\n        let firstInvalidFieldKey = ''\n        this.fields.forEach((fieldComponent) => {\n          const modelKey = fieldComponent.fieldValue.modelKey\n          if (modelKey) {\n            const retVal = validity[modelKey]\n            if (retVal) {\n              if (retVal.dirty) {\n                dirty = true\n              }\n              if (retVal.valid === false) {\n                valid = false\n              } else if (valid && !retVal.valid) {\n                valid = retVal.valid\n              }\n\n              if (!invalid && retVal.valid === false) {\n                // invalid\n                invalid = true\n                firstInvalidFieldKey = modelKey\n              }\n            } else if (fieldComponent.hasRules) {\n              if (valid) {\n                valid = undefined\n              }\n              validity[modelKey] = {\n                valid: undefined,\n                result: {},\n                dirty: false\n              }\n            }\n          }\n        })\n        this.validity = validity\n        this.dirty = dirty\n        this.originValid = valid\n        this.setFirstInvalid(firstInvalidFieldKey)\n        this.validatedCount++\n      },\n      setFirstInvalid(key) {\n        if (!key) {\n          this.firstInvalidField = null\n          this.firstInvalidFieldIndex = -1\n          return\n        }\n        this.fields.some((fieldComponent, index) => {\n          if (fieldComponent.fieldValue.modelKey === key) {\n            this.firstInvalidField = fieldComponent\n            this.firstInvalidFieldIndex = index\n            return true\n          }\n        })\n      },\n      addField(fieldComponent) {\n        this.fields.push(fieldComponent)\n      },\n      destroyField(fieldComponent) {\n        const i = this.fields.indexOf(fieldComponent)\n        this.fields.splice(i, 1)\n        this.setValidity(fieldComponent.fieldValue.modelKey)\n      }\n    },\n    beforeDestroy() {\n      this.form = null\n      this.firstInvalidField = null\n    },\n    components: {\n      CubeFormGroup\n    }\n  }\n</script>\n\n<style lang=\"stylus\" rel=\"stylesheet/stylus\">\n  @require \"../../common/stylus/variable.styl\"\n  @require \"../../common/stylus/mixin.styl\"\n\n  .cube-form\n    position: relative\n    font-size: $fontsize-large\n    line-height: 1.429\n    color: $form-color\n    background-color: $form-bgc\n  .cube-form_groups\n    .cube-form-group-legend\n      padding: 10px 15px\n      &:empty\n        padding-top: 5px\n        padding-bottom: 5px\n  .cube-form_standard\n    .cube-form-item\n      min-height: 46px\n    .cube-form-field\n      flex: 1\n      font-size: $fontsize-medium\n    .cube-validator\n      display: flex\n      align-items: center\n      position: relative\n    .cube-validator_invalid\n      color: $form-invalid-color\n    .cube-validator-content\n      flex: 1\n    .cube-validator-msg-def\n      font-size: 0\n    .cube-validator_invalid\n      .cube-validator-msg\n        &::before\n          content: \"\\e614\"\n          padding-left: 5px\n          font-family: \"cube-icon\"!important\n          font-size: $fontsize-large-xx\n          font-style: normal\n          -webkit-font-smoothing: antialiased\n          -webkit-text-stroke-width: 0.2px\n          -moz-osx-font-smoothing: grayscale\n    .cube-form-label\n      width: 100px\n      padding-right: 10px\n    .cube-checkbox-group, .cube-radio-group\n      &::before, &::after\n        display: none\n    .cube-input\n      input\n        padding: 13px 0\n        background-color: transparent\n      &::after\n        display: none\n    .cube-textarea-wrapper\n      padding: 13px 0\n      height: 20px\n      &.cube-textarea_expanded\n        height: 60px\n        padding-bottom: 20px\n        .cube-textarea-indicator\n          bottom: 2px\n      .cube-textarea\n        padding: 0\n        background-color: transparent\n      &::after\n        display: none\n    .cube-select\n      padding-left: 0\n      background-color: transparent\n      &::after\n        display: none\n    .cube-upload-def\n      padding: 5px 0\n      .cube-upload-btn, .cube-upload-file\n        margin: 5px 10px 5px 0\n  .cube-form_classic\n    .cube-form-item\n      display: block\n      padding: 15px\n      &:last-child\n        padding-bottom: 30px\n      &::after\n        display: none\n      .cube-validator-msg\n        position: absolute\n        margin-top: 3px\n        &::before\n          display: none\n      .cube-validator-msg-def\n        font-size: $fontsize-small\n    .cube-form-item_btn\n      padding-top: 0\n      padding-bottom: 0\n      &:last-child\n        padding-bottom: 0\n    .cube-form-label\n      padding-bottom: 15px\n  .cube-form_fresh\n    .cube-form-item\n      display: block\n      padding: 2em 15px 10px\n      &::after\n        display: none\n      .cube-validator-msg\n        position: absolute\n        top: 1em\n        right: 15px\n        bottom: auto\n        margin-top: -.4em\n        font-size: $fontsize-small\n        &::before\n          display: none\n      .cube-validator-msg-def\n        font-size: 100%\n    .cube-form-item_btn\n      padding-top: 0\n      padding-bottom: 0\n      &:last-child\n        padding-bottom: 0\n    .cube-form-label\n      position: absolute\n      top: 1em\n      margin-top: -.4em\n      font-size: $fontsize-small\n</style>\n"],"sourceRoot":"node_modules/cube-ui/src/components/form"}]}